; ModuleID = '../kernel-src/MatrixMultiplication_Kernels.cl'
target datalayout = "e-p:64:64:64-p3:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v16:16:16-v24:32:32-v32:32:32-v48:64:64-v64:64:64-v96:128:128-v128:128:128-v192:256:256-v256:256:256-v512:512:512-v1024:1024:1024-v2048:2048:2048-n32:64"
target triple = "r600--"

; Function Attrs: nounwind
define void @mmmKernel(<4 x float> addrspace(1)* nocapture readonly %matrixA, <4 x float> addrspace(1)* nocapture readonly %matrixB, <4 x float> addrspace(1)* nocapture %matrixC, i32 %widthA, i32 %widthB) #0 {
  %1 = tail call i32 @get_global_id(i32 0) #3
  %2 = tail call i32 @get_global_id(i32 1) #3
  %3 = lshr i32 %widthB, 2
  %4 = icmp eq i32 %widthA, 0
  %.pre = shl i32 %2, 2
  br i1 %4, label %._crit_edge12, label %.lr.ph

._crit_edge12:                                    ; preds = %0
  %.pre13 = or i32 %.pre, 1
  %.pre15 = or i32 %.pre, 2
  %.pre17 = or i32 %.pre, 3
  br label %._crit_edge

.lr.ph:                                           ; preds = %0
  %5 = lshr i32 %widthA, 2
  %6 = mul i32 %.pre, %5
  %7 = or i32 %.pre, 1
  %8 = mul i32 %7, %5
  %9 = or i32 %.pre, 2
  %10 = mul i32 %9, %5
  %11 = or i32 %.pre, 3
  %12 = mul i32 %11, %5
  br label %13

; <label>:13                                      ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %sum0.05 = phi <4 x float> [ zeroinitializer, %.lr.ph ], [ %105, %13 ]
  %sum1.04 = phi <4 x float> [ zeroinitializer, %.lr.ph ], [ %137, %13 ]
  %sum2.03 = phi <4 x float> [ zeroinitializer, %.lr.ph ], [ %169, %13 ]
  %sum3.02 = phi <4 x float> [ zeroinitializer, %.lr.ph ], [ %201, %13 ]
  %14 = trunc i64 %indvars.iv to i32
  %15 = sdiv i32 %14, 4
  %16 = add i32 %15, %6
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds <4 x float> addrspace(1)* %matrixA, i64 %17
  %19 = load <4 x float> addrspace(1)* %18, align 16, !tbaa !3
  %20 = add i32 %15, %8
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds <4 x float> addrspace(1)* %matrixA, i64 %21
  %23 = load <4 x float> addrspace(1)* %22, align 16, !tbaa !3
  %24 = add i32 %15, %10
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds <4 x float> addrspace(1)* %matrixA, i64 %25
  %27 = load <4 x float> addrspace(1)* %26, align 16, !tbaa !3
  %28 = add i32 %15, %12
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds <4 x float> addrspace(1)* %matrixA, i64 %29
  %31 = load <4 x float> addrspace(1)* %30, align 16, !tbaa !3
  %32 = mul i32 %14, %3
  %33 = add i32 %32, %1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds <4 x float> addrspace(1)* %matrixB, i64 %34
  %36 = load <4 x float> addrspace(1)* %35, align 16, !tbaa !3
  %37 = or i64 %indvars.iv, 1
  %38 = trunc i64 %37 to i32
  %39 = mul i32 %38, %3
  %40 = add i32 %39, %1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds <4 x float> addrspace(1)* %matrixB, i64 %41
  %43 = load <4 x float> addrspace(1)* %42, align 16, !tbaa !3
  %44 = or i64 %indvars.iv, 2
  %45 = trunc i64 %44 to i32
  %46 = mul i32 %45, %3
  %47 = add i32 %46, %1
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds <4 x float> addrspace(1)* %matrixB, i64 %48
  %50 = load <4 x float> addrspace(1)* %49, align 16, !tbaa !3
  %51 = or i64 %indvars.iv, 3
  %52 = trunc i64 %51 to i32
  %53 = mul i32 %52, %3
  %54 = add i32 %53, %1
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds <4 x float> addrspace(1)* %matrixB, i64 %55
  %57 = load <4 x float> addrspace(1)* %56, align 16, !tbaa !3
  %58 = extractelement <4 x float> %19, i32 0
  %59 = extractelement <4 x float> %36, i32 0
  %60 = extractelement <4 x float> %19, i32 1
  %61 = extractelement <4 x float> %43, i32 0
  %62 = fmul float %60, %61
  %63 = tail call float @llvm.fmuladd.f32(float %58, float %59, float %62)
  %64 = extractelement <4 x float> %19, i32 2
  %65 = extractelement <4 x float> %50, i32 0
  %66 = tail call float @llvm.fmuladd.f32(float %64, float %65, float %63)
  %67 = extractelement <4 x float> %19, i32 3
  %68 = extractelement <4 x float> %57, i32 0
  %69 = tail call float @llvm.fmuladd.f32(float %67, float %68, float %66)
  %70 = extractelement <4 x float> %sum0.05, i32 0
  %71 = fadd float %70, %69
  %72 = insertelement <4 x float> undef, float %71, i32 0
  %73 = extractelement <4 x float> %36, i32 1
  %74 = extractelement <4 x float> %43, i32 1
  %75 = fmul float %60, %74
  %76 = tail call float @llvm.fmuladd.f32(float %58, float %73, float %75)
  %77 = extractelement <4 x float> %50, i32 1
  %78 = tail call float @llvm.fmuladd.f32(float %64, float %77, float %76)
  %79 = extractelement <4 x float> %57, i32 1
  %80 = tail call float @llvm.fmuladd.f32(float %67, float %79, float %78)
  %81 = extractelement <4 x float> %sum0.05, i32 1
  %82 = fadd float %81, %80
  %83 = insertelement <4 x float> %72, float %82, i32 1
  %84 = extractelement <4 x float> %36, i32 2
  %85 = extractelement <4 x float> %43, i32 2
  %86 = fmul float %60, %85
  %87 = tail call float @llvm.fmuladd.f32(float %58, float %84, float %86)
  %88 = extractelement <4 x float> %50, i32 2
  %89 = tail call float @llvm.fmuladd.f32(float %64, float %88, float %87)
  %90 = extractelement <4 x float> %57, i32 2
  %91 = tail call float @llvm.fmuladd.f32(float %67, float %90, float %89)
  %92 = extractelement <4 x float> %sum0.05, i32 2
  %93 = fadd float %92, %91
  %94 = insertelement <4 x float> %83, float %93, i32 2
  %95 = extractelement <4 x float> %36, i32 3
  %96 = extractelement <4 x float> %43, i32 3
  %97 = fmul float %60, %96
  %98 = tail call float @llvm.fmuladd.f32(float %58, float %95, float %97)
  %99 = extractelement <4 x float> %50, i32 3
  %100 = tail call float @llvm.fmuladd.f32(float %64, float %99, float %98)
  %101 = extractelement <4 x float> %57, i32 3
  %102 = tail call float @llvm.fmuladd.f32(float %67, float %101, float %100)
  %103 = extractelement <4 x float> %sum0.05, i32 3
  %104 = fadd float %103, %102
  %105 = insertelement <4 x float> %94, float %104, i32 3
  %106 = extractelement <4 x float> %23, i32 0
  %107 = extractelement <4 x float> %23, i32 1
  %108 = fmul float %107, %61
  %109 = tail call float @llvm.fmuladd.f32(float %106, float %59, float %108)
  %110 = extractelement <4 x float> %23, i32 2
  %111 = tail call float @llvm.fmuladd.f32(float %110, float %65, float %109)
  %112 = extractelement <4 x float> %23, i32 3
  %113 = tail call float @llvm.fmuladd.f32(float %112, float %68, float %111)
  %114 = extractelement <4 x float> %sum1.04, i32 0
  %115 = fadd float %114, %113
  %116 = insertelement <4 x float> undef, float %115, i32 0
  %117 = fmul float %107, %74
  %118 = tail call float @llvm.fmuladd.f32(float %106, float %73, float %117)
  %119 = tail call float @llvm.fmuladd.f32(float %110, float %77, float %118)
  %120 = tail call float @llvm.fmuladd.f32(float %112, float %79, float %119)
  %121 = extractelement <4 x float> %sum1.04, i32 1
  %122 = fadd float %121, %120
  %123 = insertelement <4 x float> %116, float %122, i32 1
  %124 = fmul float %107, %85
  %125 = tail call float @llvm.fmuladd.f32(float %106, float %84, float %124)
  %126 = tail call float @llvm.fmuladd.f32(float %110, float %88, float %125)
  %127 = tail call float @llvm.fmuladd.f32(float %112, float %90, float %126)
  %128 = extractelement <4 x float> %sum1.04, i32 2
  %129 = fadd float %128, %127
  %130 = insertelement <4 x float> %123, float %129, i32 2
  %131 = fmul float %107, %96
  %132 = tail call float @llvm.fmuladd.f32(float %106, float %95, float %131)
  %133 = tail call float @llvm.fmuladd.f32(float %110, float %99, float %132)
  %134 = tail call float @llvm.fmuladd.f32(float %112, float %101, float %133)
  %135 = extractelement <4 x float> %sum1.04, i32 3
  %136 = fadd float %135, %134
  %137 = insertelement <4 x float> %130, float %136, i32 3
  %138 = extractelement <4 x float> %27, i32 0
  %139 = extractelement <4 x float> %27, i32 1
  %140 = fmul float %139, %61
  %141 = tail call float @llvm.fmuladd.f32(float %138, float %59, float %140)
  %142 = extractelement <4 x float> %27, i32 2
  %143 = tail call float @llvm.fmuladd.f32(float %142, float %65, float %141)
  %144 = extractelement <4 x float> %27, i32 3
  %145 = tail call float @llvm.fmuladd.f32(float %144, float %68, float %143)
  %146 = extractelement <4 x float> %sum2.03, i32 0
  %147 = fadd float %146, %145
  %148 = insertelement <4 x float> undef, float %147, i32 0
  %149 = fmul float %139, %74
  %150 = tail call float @llvm.fmuladd.f32(float %138, float %73, float %149)
  %151 = tail call float @llvm.fmuladd.f32(float %142, float %77, float %150)
  %152 = tail call float @llvm.fmuladd.f32(float %144, float %79, float %151)
  %153 = extractelement <4 x float> %sum2.03, i32 1
  %154 = fadd float %153, %152
  %155 = insertelement <4 x float> %148, float %154, i32 1
  %156 = fmul float %139, %85
  %157 = tail call float @llvm.fmuladd.f32(float %138, float %84, float %156)
  %158 = tail call float @llvm.fmuladd.f32(float %142, float %88, float %157)
  %159 = tail call float @llvm.fmuladd.f32(float %144, float %90, float %158)
  %160 = extractelement <4 x float> %sum2.03, i32 2
  %161 = fadd float %160, %159
  %162 = insertelement <4 x float> %155, float %161, i32 2
  %163 = fmul float %139, %96
  %164 = tail call float @llvm.fmuladd.f32(float %138, float %95, float %163)
  %165 = tail call float @llvm.fmuladd.f32(float %142, float %99, float %164)
  %166 = tail call float @llvm.fmuladd.f32(float %144, float %101, float %165)
  %167 = extractelement <4 x float> %sum2.03, i32 3
  %168 = fadd float %167, %166
  %169 = insertelement <4 x float> %162, float %168, i32 3
  %170 = extractelement <4 x float> %31, i32 0
  %171 = extractelement <4 x float> %31, i32 1
  %172 = fmul float %171, %61
  %173 = tail call float @llvm.fmuladd.f32(float %170, float %59, float %172)
  %174 = extractelement <4 x float> %31, i32 2
  %175 = tail call float @llvm.fmuladd.f32(float %174, float %65, float %173)
  %176 = extractelement <4 x float> %31, i32 3
  %177 = tail call float @llvm.fmuladd.f32(float %176, float %68, float %175)
  %178 = extractelement <4 x float> %sum3.02, i32 0
  %179 = fadd float %178, %177
  %180 = insertelement <4 x float> undef, float %179, i32 0
  %181 = fmul float %171, %74
  %182 = tail call float @llvm.fmuladd.f32(float %170, float %73, float %181)
  %183 = tail call float @llvm.fmuladd.f32(float %174, float %77, float %182)
  %184 = tail call float @llvm.fmuladd.f32(float %176, float %79, float %183)
  %185 = extractelement <4 x float> %sum3.02, i32 1
  %186 = fadd float %185, %184
  %187 = insertelement <4 x float> %180, float %186, i32 1
  %188 = fmul float %171, %85
  %189 = tail call float @llvm.fmuladd.f32(float %170, float %84, float %188)
  %190 = tail call float @llvm.fmuladd.f32(float %174, float %88, float %189)
  %191 = tail call float @llvm.fmuladd.f32(float %176, float %90, float %190)
  %192 = extractelement <4 x float> %sum3.02, i32 2
  %193 = fadd float %192, %191
  %194 = insertelement <4 x float> %187, float %193, i32 2
  %195 = fmul float %171, %96
  %196 = tail call float @llvm.fmuladd.f32(float %170, float %95, float %195)
  %197 = tail call float @llvm.fmuladd.f32(float %174, float %99, float %196)
  %198 = tail call float @llvm.fmuladd.f32(float %176, float %101, float %197)
  %199 = extractelement <4 x float> %sum3.02, i32 3
  %200 = fadd float %199, %198
  %201 = insertelement <4 x float> %194, float %200, i32 3
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4
  %202 = trunc i64 %indvars.iv.next to i32
  %203 = icmp ult i32 %202, %widthA
  br i1 %203, label %13, label %._crit_edge

._crit_edge:                                      ; preds = %13, %._crit_edge12
  %.pre-phi18 = phi i32 [ %.pre17, %._crit_edge12 ], [ %11, %13 ]
  %.pre-phi16 = phi i32 [ %.pre15, %._crit_edge12 ], [ %9, %13 ]
  %.pre-phi14 = phi i32 [ %.pre13, %._crit_edge12 ], [ %7, %13 ]
  %sum0.0.lcssa = phi <4 x float> [ zeroinitializer, %._crit_edge12 ], [ %105, %13 ]
  %sum1.0.lcssa = phi <4 x float> [ zeroinitializer, %._crit_edge12 ], [ %137, %13 ]
  %sum2.0.lcssa = phi <4 x float> [ zeroinitializer, %._crit_edge12 ], [ %169, %13 ]
  %sum3.0.lcssa = phi <4 x float> [ zeroinitializer, %._crit_edge12 ], [ %201, %13 ]
  %204 = mul i32 %.pre, %3
  %205 = add i32 %204, %1
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds <4 x float> addrspace(1)* %matrixC, i64 %206
  store <4 x float> %sum0.0.lcssa, <4 x float> addrspace(1)* %207, align 16, !tbaa !3
  %208 = mul i32 %.pre-phi14, %3
  %209 = add i32 %208, %1
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds <4 x float> addrspace(1)* %matrixC, i64 %210
  store <4 x float> %sum1.0.lcssa, <4 x float> addrspace(1)* %211, align 16, !tbaa !3
  %212 = mul i32 %.pre-phi16, %3
  %213 = add i32 %212, %1
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds <4 x float> addrspace(1)* %matrixC, i64 %214
  store <4 x float> %sum2.0.lcssa, <4 x float> addrspace(1)* %215, align 16, !tbaa !3
  %216 = mul i32 %.pre-phi18, %3
  %217 = add i32 %216, %1
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds <4 x float> addrspace(1)* %matrixC, i64 %218
  store <4 x float> %sum3.0.lcssa, <4 x float> addrspace(1)* %219, align 16, !tbaa !3
  ret void
}

declare i32 @get_global_id(i32) #1

; Function Attrs: nounwind readnone
declare float @llvm.fmuladd.f32(float, float, float) #2

; Function Attrs: nounwind
define void @mmmKernel_local(<4 x float> addrspace(1)* nocapture readonly %matrixA, <4 x float> addrspace(1)* nocapture readonly %matrixB, <4 x float> addrspace(1)* nocapture %matrixC, i32 %widthA, <4 x float> addrspace(3)* nocapture %blockA) #0 {
  %1 = tail call i32 @get_local_id(i32 0) #3
  %2 = tail call i32 @get_local_size(i32 0) #3
  %3 = tail call i32 @get_local_id(i32 1) #3
  %4 = shl i32 %2, 2
  %5 = mul i32 %4, %3
  %6 = add i32 %5, %1
  %7 = tail call i32 @get_global_id(i32 0) #3
  %8 = tail call i32 @get_global_id(i32 1) #3
  %9 = shl i32 %8, 2
  %10 = tail call i32 @get_global_size(i32 0) #3
  %11 = mul i32 %9, %10
  %12 = add i32 %11, %7
  %13 = sdiv i32 %widthA, 4
  %14 = tail call i32 @get_local_size(i32 0) #3
  %15 = udiv i32 %13, %14
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %._crit_edge16, label %.lr.ph15

.lr.ph15:                                         ; preds = %0
  %17 = shl i32 %13, 2
  %18 = getelementptr inbounds <4 x float> addrspace(3)* %blockA, i32 %6
  %19 = shl i32 %13, 1
  %20 = mul nsw i32 %13, 3
  br label %21

; <label>:21                                      ; preds = %.lr.ph15, %._crit_edge
  %sum0.013 = phi <4 x float> [ zeroinitializer, %.lr.ph15 ], [ %sum0.1.lcssa, %._crit_edge ]
  %sum1.012 = phi <4 x float> [ zeroinitializer, %.lr.ph15 ], [ %sum1.1.lcssa, %._crit_edge ]
  %sum2.011 = phi <4 x float> [ zeroinitializer, %.lr.ph15 ], [ %sum2.1.lcssa, %._crit_edge ]
  %sum3.010 = phi <4 x float> [ zeroinitializer, %.lr.ph15 ], [ %sum3.1.lcssa, %._crit_edge ]
  %i.09 = phi i32 [ 0, %.lr.ph15 ], [ %271, %._crit_edge ]
  %22 = tail call i32 @get_local_size(i32 0) #3
  %23 = mul i32 %22, %i.09
  %24 = tail call i32 @get_local_id(i32 0) #3
  %25 = add i32 %23, %24
  %26 = tail call i32 @get_global_id(i32 1) #3
  %27 = mul i32 %17, %26
  %28 = add i32 %25, %27
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds <4 x float> addrspace(1)* %matrixA, i64 %29
  %31 = load <4 x float> addrspace(1)* %30, align 16, !tbaa !3
  store <4 x float> %31, <4 x float> addrspace(3)* %18, align 16, !tbaa !3
  %32 = add nsw i32 %28, %13
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds <4 x float> addrspace(1)* %matrixA, i64 %33
  %35 = load <4 x float> addrspace(1)* %34, align 16, !tbaa !3
  %36 = tail call i32 @get_local_size(i32 0) #3
  %37 = add i32 %36, %6
  %38 = getelementptr inbounds <4 x float> addrspace(3)* %blockA, i32 %37
  store <4 x float> %35, <4 x float> addrspace(3)* %38, align 16, !tbaa !3
  %39 = add nsw i32 %28, %19
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds <4 x float> addrspace(1)* %matrixA, i64 %40
  %42 = load <4 x float> addrspace(1)* %41, align 16, !tbaa !3
  %43 = tail call i32 @get_local_size(i32 0) #3
  %44 = shl i32 %43, 1
  %45 = add i32 %44, %6
  %46 = getelementptr inbounds <4 x float> addrspace(3)* %blockA, i32 %45
  store <4 x float> %42, <4 x float> addrspace(3)* %46, align 16, !tbaa !3
  %47 = add nsw i32 %28, %20
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds <4 x float> addrspace(1)* %matrixA, i64 %48
  %50 = load <4 x float> addrspace(1)* %49, align 16, !tbaa !3
  %51 = tail call i32 @get_local_size(i32 0) #3
  %52 = mul i32 %51, 3
  %53 = add i32 %52, %6
  %54 = getelementptr inbounds <4 x float> addrspace(3)* %blockA, i32 %53
  store <4 x float> %50, <4 x float> addrspace(3)* %54, align 16, !tbaa !3
  tail call void @barrier(i32 1) #3
  %55 = tail call i32 @get_global_id(i32 0) #3
  %56 = tail call i32 @get_local_size(i32 0) #3
  %57 = tail call i32 @get_global_size(i32 0) #3
  %58 = shl i32 %i.09, 2
  %59 = mul i32 %58, %56
  %60 = mul i32 %59, %57
  %61 = add i32 %60, %55
  %62 = tail call i32 @get_local_size(i32 0) #3
  %.mask = and i32 %62, 1073741823
  %63 = icmp eq i32 %.mask, 0
  br i1 %63, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %21, %.lr.ph
  %sum0.15 = phi <4 x float> [ %170, %.lr.ph ], [ %sum0.013, %21 ]
  %sum1.14 = phi <4 x float> [ %202, %.lr.ph ], [ %sum1.012, %21 ]
  %sum2.13 = phi <4 x float> [ %234, %.lr.ph ], [ %sum2.011, %21 ]
  %sum3.12 = phi <4 x float> [ %266, %.lr.ph ], [ %sum3.010, %21 ]
  %j.01 = phi i32 [ %267, %.lr.ph ], [ 0, %21 ]
  %64 = ashr exact i32 %j.01, 2
  %65 = tail call i32 @get_local_id(i32 1) #3
  %66 = shl i32 %65, 2
  %67 = tail call i32 @get_local_size(i32 0) #3
  %68 = mul i32 %66, %67
  %69 = add i32 %68, %64
  %70 = getelementptr inbounds <4 x float> addrspace(3)* %blockA, i32 %69
  %71 = load <4 x float> addrspace(3)* %70, align 16, !tbaa !3
  %72 = tail call i32 @get_local_id(i32 1) #3
  %73 = shl i32 %72, 2
  %74 = or i32 %73, 1
  %75 = tail call i32 @get_local_size(i32 0) #3
  %76 = mul i32 %74, %75
  %77 = add i32 %76, %64
  %78 = getelementptr inbounds <4 x float> addrspace(3)* %blockA, i32 %77
  %79 = load <4 x float> addrspace(3)* %78, align 16, !tbaa !3
  %80 = tail call i32 @get_local_id(i32 1) #3
  %81 = shl i32 %80, 2
  %82 = or i32 %81, 2
  %83 = tail call i32 @get_local_size(i32 0) #3
  %84 = mul i32 %82, %83
  %85 = add i32 %84, %64
  %86 = getelementptr inbounds <4 x float> addrspace(3)* %blockA, i32 %85
  %87 = load <4 x float> addrspace(3)* %86, align 16, !tbaa !3
  %88 = tail call i32 @get_local_id(i32 1) #3
  %89 = shl i32 %88, 2
  %90 = or i32 %89, 3
  %91 = tail call i32 @get_local_size(i32 0) #3
  %92 = mul i32 %90, %91
  %93 = add i32 %92, %64
  %94 = getelementptr inbounds <4 x float> addrspace(3)* %blockA, i32 %93
  %95 = load <4 x float> addrspace(3)* %94, align 16, !tbaa !3
  %96 = tail call i32 @get_global_size(i32 0) #3
  %97 = mul i32 %96, %j.01
  %98 = add i32 %97, %61
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds <4 x float> addrspace(1)* %matrixB, i64 %99
  %101 = load <4 x float> addrspace(1)* %100, align 16, !tbaa !3
  %102 = or i32 %j.01, 1
  %103 = tail call i32 @get_global_size(i32 0) #3
  %104 = mul i32 %103, %102
  %105 = add i32 %104, %61
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds <4 x float> addrspace(1)* %matrixB, i64 %106
  %108 = load <4 x float> addrspace(1)* %107, align 16, !tbaa !3
  %109 = or i32 %j.01, 2
  %110 = tail call i32 @get_global_size(i32 0) #3
  %111 = mul i32 %110, %109
  %112 = add i32 %111, %61
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds <4 x float> addrspace(1)* %matrixB, i64 %113
  %115 = load <4 x float> addrspace(1)* %114, align 16, !tbaa !3
  %116 = or i32 %j.01, 3
  %117 = tail call i32 @get_global_size(i32 0) #3
  %118 = mul i32 %117, %116
  %119 = add i32 %118, %61
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds <4 x float> addrspace(1)* %matrixB, i64 %120
  %122 = load <4 x float> addrspace(1)* %121, align 16, !tbaa !3
  %123 = extractelement <4 x float> %71, i32 0
  %124 = extractelement <4 x float> %101, i32 0
  %125 = extractelement <4 x float> %71, i32 1
  %126 = extractelement <4 x float> %108, i32 0
  %127 = fmul float %125, %126
  %128 = tail call float @llvm.fmuladd.f32(float %123, float %124, float %127)
  %129 = extractelement <4 x float> %71, i32 2
  %130 = extractelement <4 x float> %115, i32 0
  %131 = tail call float @llvm.fmuladd.f32(float %129, float %130, float %128)
  %132 = extractelement <4 x float> %71, i32 3
  %133 = extractelement <4 x float> %122, i32 0
  %134 = tail call float @llvm.fmuladd.f32(float %132, float %133, float %131)
  %135 = extractelement <4 x float> %sum0.15, i32 0
  %136 = fadd float %135, %134
  %137 = insertelement <4 x float> undef, float %136, i32 0
  %138 = extractelement <4 x float> %101, i32 1
  %139 = extractelement <4 x float> %108, i32 1
  %140 = fmul float %125, %139
  %141 = tail call float @llvm.fmuladd.f32(float %123, float %138, float %140)
  %142 = extractelement <4 x float> %115, i32 1
  %143 = tail call float @llvm.fmuladd.f32(float %129, float %142, float %141)
  %144 = extractelement <4 x float> %122, i32 1
  %145 = tail call float @llvm.fmuladd.f32(float %132, float %144, float %143)
  %146 = extractelement <4 x float> %sum0.15, i32 1
  %147 = fadd float %146, %145
  %148 = insertelement <4 x float> %137, float %147, i32 1
  %149 = extractelement <4 x float> %101, i32 2
  %150 = extractelement <4 x float> %108, i32 2
  %151 = fmul float %125, %150
  %152 = tail call float @llvm.fmuladd.f32(float %123, float %149, float %151)
  %153 = extractelement <4 x float> %115, i32 2
  %154 = tail call float @llvm.fmuladd.f32(float %129, float %153, float %152)
  %155 = extractelement <4 x float> %122, i32 2
  %156 = tail call float @llvm.fmuladd.f32(float %132, float %155, float %154)
  %157 = extractelement <4 x float> %sum0.15, i32 2
  %158 = fadd float %157, %156
  %159 = insertelement <4 x float> %148, float %158, i32 2
  %160 = extractelement <4 x float> %101, i32 3
  %161 = extractelement <4 x float> %108, i32 3
  %162 = fmul float %125, %161
  %163 = tail call float @llvm.fmuladd.f32(float %123, float %160, float %162)
  %164 = extractelement <4 x float> %115, i32 3
  %165 = tail call float @llvm.fmuladd.f32(float %129, float %164, float %163)
  %166 = extractelement <4 x float> %122, i32 3
  %167 = tail call float @llvm.fmuladd.f32(float %132, float %166, float %165)
  %168 = extractelement <4 x float> %sum0.15, i32 3
  %169 = fadd float %168, %167
  %170 = insertelement <4 x float> %159, float %169, i32 3
  %171 = extractelement <4 x float> %79, i32 0
  %172 = extractelement <4 x float> %79, i32 1
  %173 = fmul float %172, %126
  %174 = tail call float @llvm.fmuladd.f32(float %171, float %124, float %173)
  %175 = extractelement <4 x float> %79, i32 2
  %176 = tail call float @llvm.fmuladd.f32(float %175, float %130, float %174)
  %177 = extractelement <4 x float> %79, i32 3
  %178 = tail call float @llvm.fmuladd.f32(float %177, float %133, float %176)
  %179 = extractelement <4 x float> %sum1.14, i32 0
  %180 = fadd float %179, %178
  %181 = insertelement <4 x float> undef, float %180, i32 0
  %182 = fmul float %172, %139
  %183 = tail call float @llvm.fmuladd.f32(float %171, float %138, float %182)
  %184 = tail call float @llvm.fmuladd.f32(float %175, float %142, float %183)
  %185 = tail call float @llvm.fmuladd.f32(float %177, float %144, float %184)
  %186 = extractelement <4 x float> %sum1.14, i32 1
  %187 = fadd float %186, %185
  %188 = insertelement <4 x float> %181, float %187, i32 1
  %189 = fmul float %172, %150
  %190 = tail call float @llvm.fmuladd.f32(float %171, float %149, float %189)
  %191 = tail call float @llvm.fmuladd.f32(float %175, float %153, float %190)
  %192 = tail call float @llvm.fmuladd.f32(float %177, float %155, float %191)
  %193 = extractelement <4 x float> %sum1.14, i32 2
  %194 = fadd float %193, %192
  %195 = insertelement <4 x float> %188, float %194, i32 2
  %196 = fmul float %172, %161
  %197 = tail call float @llvm.fmuladd.f32(float %171, float %160, float %196)
  %198 = tail call float @llvm.fmuladd.f32(float %175, float %164, float %197)
  %199 = tail call float @llvm.fmuladd.f32(float %177, float %166, float %198)
  %200 = extractelement <4 x float> %sum1.14, i32 3
  %201 = fadd float %200, %199
  %202 = insertelement <4 x float> %195, float %201, i32 3
  %203 = extractelement <4 x float> %87, i32 0
  %204 = extractelement <4 x float> %87, i32 1
  %205 = fmul float %204, %126
  %206 = tail call float @llvm.fmuladd.f32(float %203, float %124, float %205)
  %207 = extractelement <4 x float> %87, i32 2
  %208 = tail call float @llvm.fmuladd.f32(float %207, float %130, float %206)
  %209 = extractelement <4 x float> %87, i32 3
  %210 = tail call float @llvm.fmuladd.f32(float %209, float %133, float %208)
  %211 = extractelement <4 x float> %sum2.13, i32 0
  %212 = fadd float %211, %210
  %213 = insertelement <4 x float> undef, float %212, i32 0
  %214 = fmul float %204, %139
  %215 = tail call float @llvm.fmuladd.f32(float %203, float %138, float %214)
  %216 = tail call float @llvm.fmuladd.f32(float %207, float %142, float %215)
  %217 = tail call float @llvm.fmuladd.f32(float %209, float %144, float %216)
  %218 = extractelement <4 x float> %sum2.13, i32 1
  %219 = fadd float %218, %217
  %220 = insertelement <4 x float> %213, float %219, i32 1
  %221 = fmul float %204, %150
  %222 = tail call float @llvm.fmuladd.f32(float %203, float %149, float %221)
  %223 = tail call float @llvm.fmuladd.f32(float %207, float %153, float %222)
  %224 = tail call float @llvm.fmuladd.f32(float %209, float %155, float %223)
  %225 = extractelement <4 x float> %sum2.13, i32 2
  %226 = fadd float %225, %224
  %227 = insertelement <4 x float> %220, float %226, i32 2
  %228 = fmul float %204, %161
  %229 = tail call float @llvm.fmuladd.f32(float %203, float %160, float %228)
  %230 = tail call float @llvm.fmuladd.f32(float %207, float %164, float %229)
  %231 = tail call float @llvm.fmuladd.f32(float %209, float %166, float %230)
  %232 = extractelement <4 x float> %sum2.13, i32 3
  %233 = fadd float %232, %231
  %234 = insertelement <4 x float> %227, float %233, i32 3
  %235 = extractelement <4 x float> %95, i32 0
  %236 = extractelement <4 x float> %95, i32 1
  %237 = fmul float %236, %126
  %238 = tail call float @llvm.fmuladd.f32(float %235, float %124, float %237)
  %239 = extractelement <4 x float> %95, i32 2
  %240 = tail call float @llvm.fmuladd.f32(float %239, float %130, float %238)
  %241 = extractelement <4 x float> %95, i32 3
  %242 = tail call float @llvm.fmuladd.f32(float %241, float %133, float %240)
  %243 = extractelement <4 x float> %sum3.12, i32 0
  %244 = fadd float %243, %242
  %245 = insertelement <4 x float> undef, float %244, i32 0
  %246 = fmul float %236, %139
  %247 = tail call float @llvm.fmuladd.f32(float %235, float %138, float %246)
  %248 = tail call float @llvm.fmuladd.f32(float %239, float %142, float %247)
  %249 = tail call float @llvm.fmuladd.f32(float %241, float %144, float %248)
  %250 = extractelement <4 x float> %sum3.12, i32 1
  %251 = fadd float %250, %249
  %252 = insertelement <4 x float> %245, float %251, i32 1
  %253 = fmul float %236, %150
  %254 = tail call float @llvm.fmuladd.f32(float %235, float %149, float %253)
  %255 = tail call float @llvm.fmuladd.f32(float %239, float %153, float %254)
  %256 = tail call float @llvm.fmuladd.f32(float %241, float %155, float %255)
  %257 = extractelement <4 x float> %sum3.12, i32 2
  %258 = fadd float %257, %256
  %259 = insertelement <4 x float> %252, float %258, i32 2
  %260 = fmul float %236, %161
  %261 = tail call float @llvm.fmuladd.f32(float %235, float %160, float %260)
  %262 = tail call float @llvm.fmuladd.f32(float %239, float %164, float %261)
  %263 = tail call float @llvm.fmuladd.f32(float %241, float %166, float %262)
  %264 = extractelement <4 x float> %sum3.12, i32 3
  %265 = fadd float %264, %263
  %266 = insertelement <4 x float> %259, float %265, i32 3
  %267 = add nsw i32 %j.01, 4
  %268 = tail call i32 @get_local_size(i32 0) #3
  %269 = shl i32 %268, 2
  %270 = icmp ult i32 %267, %269
  br i1 %270, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %21
  %sum0.1.lcssa = phi <4 x float> [ %sum0.013, %21 ], [ %170, %.lr.ph ]
  %sum1.1.lcssa = phi <4 x float> [ %sum1.012, %21 ], [ %202, %.lr.ph ]
  %sum2.1.lcssa = phi <4 x float> [ %sum2.011, %21 ], [ %234, %.lr.ph ]
  %sum3.1.lcssa = phi <4 x float> [ %sum3.010, %21 ], [ %266, %.lr.ph ]
  tail call void @barrier(i32 1) #3
  %271 = add nsw i32 %i.09, 1
  %272 = tail call i32 @get_local_size(i32 0) #3
  %273 = udiv i32 %13, %272
  %274 = icmp ult i32 %271, %273
  br i1 %274, label %21, label %._crit_edge16

._crit_edge16:                                    ; preds = %._crit_edge, %0
  %sum0.0.lcssa = phi <4 x float> [ zeroinitializer, %0 ], [ %sum0.1.lcssa, %._crit_edge ]
  %sum1.0.lcssa = phi <4 x float> [ zeroinitializer, %0 ], [ %sum1.1.lcssa, %._crit_edge ]
  %sum2.0.lcssa = phi <4 x float> [ zeroinitializer, %0 ], [ %sum2.1.lcssa, %._crit_edge ]
  %sum3.0.lcssa = phi <4 x float> [ zeroinitializer, %0 ], [ %sum3.1.lcssa, %._crit_edge ]
  %275 = sext i32 %12 to i64
  %276 = getelementptr inbounds <4 x float> addrspace(1)* %matrixC, i64 %275
  store <4 x float> %sum0.0.lcssa, <4 x float> addrspace(1)* %276, align 16, !tbaa !3
  %277 = tail call i32 @get_global_size(i32 0) #3
  %278 = add i32 %277, %12
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds <4 x float> addrspace(1)* %matrixC, i64 %279
  store <4 x float> %sum1.0.lcssa, <4 x float> addrspace(1)* %280, align 16, !tbaa !3
  %281 = tail call i32 @get_global_size(i32 0) #3
  %282 = shl i32 %281, 1
  %283 = add i32 %282, %12
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds <4 x float> addrspace(1)* %matrixC, i64 %284
  store <4 x float> %sum2.0.lcssa, <4 x float> addrspace(1)* %285, align 16, !tbaa !3
  %286 = tail call i32 @get_global_size(i32 0) #3
  %287 = mul i32 %286, 3
  %288 = add i32 %287, %12
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds <4 x float> addrspace(1)* %matrixC, i64 %289
  store <4 x float> %sum3.0.lcssa, <4 x float> addrspace(1)* %290, align 16, !tbaa !3
  ret void
}

declare i32 @get_local_id(i32) #1

declare i32 @get_local_size(i32) #1

declare i32 @get_global_size(i32) #1

declare void @barrier(i32) #1

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!opencl.kernels = !{!0, !1}
!llvm.ident = !{!2}

!0 = metadata !{void (<4 x float> addrspace(1)*, <4 x float> addrspace(1)*, <4 x float> addrspace(1)*, i32, i32)* @mmmKernel}
!1 = metadata !{void (<4 x float> addrspace(1)*, <4 x float> addrspace(1)*, <4 x float> addrspace(1)*, i32, <4 x float> addrspace(3)*)* @mmmKernel_local}
!2 = metadata !{metadata !"Ubuntu clang version 3.4-1ubuntu3 (tags/RELEASE_34/final) (based on LLVM 3.4)"}
!3 = metadata !{metadata !4, metadata !4, i64 0}
!4 = metadata !{metadata !"omnipotent char", metadata !5, i64 0}
!5 = metadata !{metadata !"Simple C/C++ TBAA"}
