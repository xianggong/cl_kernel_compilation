; ModuleID = 'MatrixMulImage_Kernels.opt.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v16:16:16-v24:32:32-v32:32:32-v48:64:64-v64:64:64-v96:128:128-v128:128:128-v192:256:256-v256:256:256-v512:512:512-v1024:1024:1024"
target triple = "spir64-unknown-unknown"

%opencl.image2d_t = type opaque

@imageSampler = addrspace(2) constant i32 20, align 4

; Function Attrs: nounwind
define cc76 void @__OpenCL_mmmKernel_kernel(%opencl.image2d_t addrspace(1)* %matrixA, %opencl.image2d_t addrspace(1)* %matrixB, %opencl.image2d_t addrspace(1)* %matrixC, i32 %widthA, i32 %widthB) #0 {
entry:
  %call = call cc75 i64 @_Z13get_global_idj(i32 0) #1
  %conv = trunc i64 %call to i32
  %vecinit = insertelement <2 x i32> undef, i32 %conv, i32 0
  %call1 = call cc75 i64 @_Z13get_global_idj(i32 1) #1
  %conv2 = trunc i64 %call1 to i32
  %vecinit3 = insertelement <2 x i32> %vecinit, i32 %conv2, i32 1
  %div = udiv i32 %widthB, 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %sum0.0 = phi <4 x float> [ zeroinitializer, %entry ], [ %67, %for.inc ]
  %sum1.0 = phi <4 x float> [ zeroinitializer, %entry ], [ %119, %for.inc ]
  %sum2.0 = phi <4 x float> [ zeroinitializer, %entry ], [ %171, %for.inc ]
  %sum3.0 = phi <4 x float> [ zeroinitializer, %entry ], [ %223, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %add81, %for.inc ]
  %cmp = icmp ult i32 %i.0, %widthA
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %0 = load i32 addrspace(2)* @imageSampler, align 4
  %div6 = sdiv i32 %i.0, 4
  %vecinit7 = insertelement <2 x i32> undef, i32 %div6, i32 0
  %1 = extractelement <2 x i32> %vecinit3, i32 1
  %shl = shl i32 %1, 2
  %vecinit8 = insertelement <2 x i32> %vecinit7, i32 %shl, i32 1
  %call9 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %0, <2 x i32> %vecinit8) #1
  %2 = load i32 addrspace(2)* @imageSampler, align 4
  %div11 = sdiv i32 %i.0, 4
  %vecinit12 = insertelement <2 x i32> undef, i32 %div11, i32 0
  %3 = extractelement <2 x i32> %vecinit3, i32 1
  %shl13 = shl i32 %3, 2
  %add = add nsw i32 %shl13, 1
  %vecinit14 = insertelement <2 x i32> %vecinit12, i32 %add, i32 1
  %call15 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %2, <2 x i32> %vecinit14) #1
  %4 = load i32 addrspace(2)* @imageSampler, align 4
  %div17 = sdiv i32 %i.0, 4
  %vecinit18 = insertelement <2 x i32> undef, i32 %div17, i32 0
  %5 = extractelement <2 x i32> %vecinit3, i32 1
  %shl19 = shl i32 %5, 2
  %add20 = add nsw i32 %shl19, 2
  %vecinit21 = insertelement <2 x i32> %vecinit18, i32 %add20, i32 1
  %call22 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %4, <2 x i32> %vecinit21) #1
  %6 = load i32 addrspace(2)* @imageSampler, align 4
  %div24 = sdiv i32 %i.0, 4
  %vecinit25 = insertelement <2 x i32> undef, i32 %div24, i32 0
  %7 = extractelement <2 x i32> %vecinit3, i32 1
  %shl26 = shl i32 %7, 2
  %add27 = add nsw i32 %shl26, 3
  %vecinit28 = insertelement <2 x i32> %vecinit25, i32 %add27, i32 1
  %call29 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %6, <2 x i32> %vecinit28) #1
  %8 = load i32 addrspace(2)* @imageSampler, align 4
  %9 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit31 = insertelement <2 x i32> undef, i32 %9, i32 0
  %vecinit32 = insertelement <2 x i32> %vecinit31, i32 %i.0, i32 1
  %call33 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %8, <2 x i32> %vecinit32) #1
  %10 = load i32 addrspace(2)* @imageSampler, align 4
  %11 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit35 = insertelement <2 x i32> undef, i32 %11, i32 0
  %add36 = add nsw i32 %i.0, 1
  %vecinit37 = insertelement <2 x i32> %vecinit35, i32 %add36, i32 1
  %call38 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %10, <2 x i32> %vecinit37) #1
  %12 = load i32 addrspace(2)* @imageSampler, align 4
  %13 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit40 = insertelement <2 x i32> undef, i32 %13, i32 0
  %add41 = add nsw i32 %i.0, 2
  %vecinit42 = insertelement <2 x i32> %vecinit40, i32 %add41, i32 1
  %call43 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %12, <2 x i32> %vecinit42) #1
  %14 = load i32 addrspace(2)* @imageSampler, align 4
  %15 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit45 = insertelement <2 x i32> undef, i32 %15, i32 0
  %add46 = add nsw i32 %i.0, 3
  %vecinit47 = insertelement <2 x i32> %vecinit45, i32 %add46, i32 1
  %call48 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %14, <2 x i32> %vecinit47) #1
  %16 = extractelement <4 x float> %call9, i32 0
  %17 = extractelement <4 x float> %call33, i32 0
  %18 = extractelement <4 x float> %call9, i32 1
  %19 = extractelement <4 x float> %call38, i32 0
  %mul49 = fmul float %18, %19
  %20 = call float @llvm.fmuladd.f32(float %16, float %17, float %mul49)
  %21 = extractelement <4 x float> %call9, i32 2
  %22 = extractelement <4 x float> %call43, i32 0
  %23 = call float @llvm.fmuladd.f32(float %21, float %22, float %20)
  %24 = extractelement <4 x float> %call9, i32 3
  %25 = extractelement <4 x float> %call48, i32 0
  %26 = call float @llvm.fmuladd.f32(float %24, float %25, float %23)
  %27 = extractelement <4 x float> %sum0.0, i32 0
  %add50 = fadd float %27, %26
  %28 = insertelement <4 x float> %sum0.0, float %add50, i32 0
  %29 = extractelement <4 x float> %call9, i32 0
  %30 = extractelement <4 x float> %call33, i32 1
  %31 = extractelement <4 x float> %call9, i32 1
  %32 = extractelement <4 x float> %call38, i32 1
  %mul51 = fmul float %31, %32
  %33 = call float @llvm.fmuladd.f32(float %29, float %30, float %mul51)
  %34 = extractelement <4 x float> %call9, i32 2
  %35 = extractelement <4 x float> %call43, i32 1
  %36 = call float @llvm.fmuladd.f32(float %34, float %35, float %33)
  %37 = extractelement <4 x float> %call9, i32 3
  %38 = extractelement <4 x float> %call48, i32 1
  %39 = call float @llvm.fmuladd.f32(float %37, float %38, float %36)
  %40 = extractelement <4 x float> %28, i32 1
  %add52 = fadd float %40, %39
  %41 = insertelement <4 x float> %28, float %add52, i32 1
  %42 = extractelement <4 x float> %call9, i32 0
  %43 = extractelement <4 x float> %call33, i32 2
  %44 = extractelement <4 x float> %call9, i32 1
  %45 = extractelement <4 x float> %call38, i32 2
  %mul53 = fmul float %44, %45
  %46 = call float @llvm.fmuladd.f32(float %42, float %43, float %mul53)
  %47 = extractelement <4 x float> %call9, i32 2
  %48 = extractelement <4 x float> %call43, i32 2
  %49 = call float @llvm.fmuladd.f32(float %47, float %48, float %46)
  %50 = extractelement <4 x float> %call9, i32 3
  %51 = extractelement <4 x float> %call48, i32 2
  %52 = call float @llvm.fmuladd.f32(float %50, float %51, float %49)
  %53 = extractelement <4 x float> %41, i32 2
  %add54 = fadd float %53, %52
  %54 = insertelement <4 x float> %41, float %add54, i32 2
  %55 = extractelement <4 x float> %call9, i32 0
  %56 = extractelement <4 x float> %call33, i32 3
  %57 = extractelement <4 x float> %call9, i32 1
  %58 = extractelement <4 x float> %call38, i32 3
  %mul55 = fmul float %57, %58
  %59 = call float @llvm.fmuladd.f32(float %55, float %56, float %mul55)
  %60 = extractelement <4 x float> %call9, i32 2
  %61 = extractelement <4 x float> %call43, i32 3
  %62 = call float @llvm.fmuladd.f32(float %60, float %61, float %59)
  %63 = extractelement <4 x float> %call9, i32 3
  %64 = extractelement <4 x float> %call48, i32 3
  %65 = call float @llvm.fmuladd.f32(float %63, float %64, float %62)
  %66 = extractelement <4 x float> %54, i32 3
  %add56 = fadd float %66, %65
  %67 = insertelement <4 x float> %54, float %add56, i32 3
  %68 = extractelement <4 x float> %call15, i32 0
  %69 = extractelement <4 x float> %call33, i32 0
  %70 = extractelement <4 x float> %call15, i32 1
  %71 = extractelement <4 x float> %call38, i32 0
  %mul57 = fmul float %70, %71
  %72 = call float @llvm.fmuladd.f32(float %68, float %69, float %mul57)
  %73 = extractelement <4 x float> %call15, i32 2
  %74 = extractelement <4 x float> %call43, i32 0
  %75 = call float @llvm.fmuladd.f32(float %73, float %74, float %72)
  %76 = extractelement <4 x float> %call15, i32 3
  %77 = extractelement <4 x float> %call48, i32 0
  %78 = call float @llvm.fmuladd.f32(float %76, float %77, float %75)
  %79 = extractelement <4 x float> %sum1.0, i32 0
  %add58 = fadd float %79, %78
  %80 = insertelement <4 x float> %sum1.0, float %add58, i32 0
  %81 = extractelement <4 x float> %call15, i32 0
  %82 = extractelement <4 x float> %call33, i32 1
  %83 = extractelement <4 x float> %call15, i32 1
  %84 = extractelement <4 x float> %call38, i32 1
  %mul59 = fmul float %83, %84
  %85 = call float @llvm.fmuladd.f32(float %81, float %82, float %mul59)
  %86 = extractelement <4 x float> %call15, i32 2
  %87 = extractelement <4 x float> %call43, i32 1
  %88 = call float @llvm.fmuladd.f32(float %86, float %87, float %85)
  %89 = extractelement <4 x float> %call15, i32 3
  %90 = extractelement <4 x float> %call48, i32 1
  %91 = call float @llvm.fmuladd.f32(float %89, float %90, float %88)
  %92 = extractelement <4 x float> %80, i32 1
  %add60 = fadd float %92, %91
  %93 = insertelement <4 x float> %80, float %add60, i32 1
  %94 = extractelement <4 x float> %call15, i32 0
  %95 = extractelement <4 x float> %call33, i32 2
  %96 = extractelement <4 x float> %call15, i32 1
  %97 = extractelement <4 x float> %call38, i32 2
  %mul61 = fmul float %96, %97
  %98 = call float @llvm.fmuladd.f32(float %94, float %95, float %mul61)
  %99 = extractelement <4 x float> %call15, i32 2
  %100 = extractelement <4 x float> %call43, i32 2
  %101 = call float @llvm.fmuladd.f32(float %99, float %100, float %98)
  %102 = extractelement <4 x float> %call15, i32 3
  %103 = extractelement <4 x float> %call48, i32 2
  %104 = call float @llvm.fmuladd.f32(float %102, float %103, float %101)
  %105 = extractelement <4 x float> %93, i32 2
  %add62 = fadd float %105, %104
  %106 = insertelement <4 x float> %93, float %add62, i32 2
  %107 = extractelement <4 x float> %call15, i32 0
  %108 = extractelement <4 x float> %call33, i32 3
  %109 = extractelement <4 x float> %call15, i32 1
  %110 = extractelement <4 x float> %call38, i32 3
  %mul63 = fmul float %109, %110
  %111 = call float @llvm.fmuladd.f32(float %107, float %108, float %mul63)
  %112 = extractelement <4 x float> %call15, i32 2
  %113 = extractelement <4 x float> %call43, i32 3
  %114 = call float @llvm.fmuladd.f32(float %112, float %113, float %111)
  %115 = extractelement <4 x float> %call15, i32 3
  %116 = extractelement <4 x float> %call48, i32 3
  %117 = call float @llvm.fmuladd.f32(float %115, float %116, float %114)
  %118 = extractelement <4 x float> %106, i32 3
  %add64 = fadd float %118, %117
  %119 = insertelement <4 x float> %106, float %add64, i32 3
  %120 = extractelement <4 x float> %call22, i32 0
  %121 = extractelement <4 x float> %call33, i32 0
  %122 = extractelement <4 x float> %call22, i32 1
  %123 = extractelement <4 x float> %call38, i32 0
  %mul65 = fmul float %122, %123
  %124 = call float @llvm.fmuladd.f32(float %120, float %121, float %mul65)
  %125 = extractelement <4 x float> %call22, i32 2
  %126 = extractelement <4 x float> %call43, i32 0
  %127 = call float @llvm.fmuladd.f32(float %125, float %126, float %124)
  %128 = extractelement <4 x float> %call22, i32 3
  %129 = extractelement <4 x float> %call48, i32 0
  %130 = call float @llvm.fmuladd.f32(float %128, float %129, float %127)
  %131 = extractelement <4 x float> %sum2.0, i32 0
  %add66 = fadd float %131, %130
  %132 = insertelement <4 x float> %sum2.0, float %add66, i32 0
  %133 = extractelement <4 x float> %call22, i32 0
  %134 = extractelement <4 x float> %call33, i32 1
  %135 = extractelement <4 x float> %call22, i32 1
  %136 = extractelement <4 x float> %call38, i32 1
  %mul67 = fmul float %135, %136
  %137 = call float @llvm.fmuladd.f32(float %133, float %134, float %mul67)
  %138 = extractelement <4 x float> %call22, i32 2
  %139 = extractelement <4 x float> %call43, i32 1
  %140 = call float @llvm.fmuladd.f32(float %138, float %139, float %137)
  %141 = extractelement <4 x float> %call22, i32 3
  %142 = extractelement <4 x float> %call48, i32 1
  %143 = call float @llvm.fmuladd.f32(float %141, float %142, float %140)
  %144 = extractelement <4 x float> %132, i32 1
  %add68 = fadd float %144, %143
  %145 = insertelement <4 x float> %132, float %add68, i32 1
  %146 = extractelement <4 x float> %call22, i32 0
  %147 = extractelement <4 x float> %call33, i32 2
  %148 = extractelement <4 x float> %call22, i32 1
  %149 = extractelement <4 x float> %call38, i32 2
  %mul69 = fmul float %148, %149
  %150 = call float @llvm.fmuladd.f32(float %146, float %147, float %mul69)
  %151 = extractelement <4 x float> %call22, i32 2
  %152 = extractelement <4 x float> %call43, i32 2
  %153 = call float @llvm.fmuladd.f32(float %151, float %152, float %150)
  %154 = extractelement <4 x float> %call22, i32 3
  %155 = extractelement <4 x float> %call48, i32 2
  %156 = call float @llvm.fmuladd.f32(float %154, float %155, float %153)
  %157 = extractelement <4 x float> %145, i32 2
  %add70 = fadd float %157, %156
  %158 = insertelement <4 x float> %145, float %add70, i32 2
  %159 = extractelement <4 x float> %call22, i32 0
  %160 = extractelement <4 x float> %call33, i32 3
  %161 = extractelement <4 x float> %call22, i32 1
  %162 = extractelement <4 x float> %call38, i32 3
  %mul71 = fmul float %161, %162
  %163 = call float @llvm.fmuladd.f32(float %159, float %160, float %mul71)
  %164 = extractelement <4 x float> %call22, i32 2
  %165 = extractelement <4 x float> %call43, i32 3
  %166 = call float @llvm.fmuladd.f32(float %164, float %165, float %163)
  %167 = extractelement <4 x float> %call22, i32 3
  %168 = extractelement <4 x float> %call48, i32 3
  %169 = call float @llvm.fmuladd.f32(float %167, float %168, float %166)
  %170 = extractelement <4 x float> %158, i32 3
  %add72 = fadd float %170, %169
  %171 = insertelement <4 x float> %158, float %add72, i32 3
  %172 = extractelement <4 x float> %call29, i32 0
  %173 = extractelement <4 x float> %call33, i32 0
  %174 = extractelement <4 x float> %call29, i32 1
  %175 = extractelement <4 x float> %call38, i32 0
  %mul73 = fmul float %174, %175
  %176 = call float @llvm.fmuladd.f32(float %172, float %173, float %mul73)
  %177 = extractelement <4 x float> %call29, i32 2
  %178 = extractelement <4 x float> %call43, i32 0
  %179 = call float @llvm.fmuladd.f32(float %177, float %178, float %176)
  %180 = extractelement <4 x float> %call29, i32 3
  %181 = extractelement <4 x float> %call48, i32 0
  %182 = call float @llvm.fmuladd.f32(float %180, float %181, float %179)
  %183 = extractelement <4 x float> %sum3.0, i32 0
  %add74 = fadd float %183, %182
  %184 = insertelement <4 x float> %sum3.0, float %add74, i32 0
  %185 = extractelement <4 x float> %call29, i32 0
  %186 = extractelement <4 x float> %call33, i32 1
  %187 = extractelement <4 x float> %call29, i32 1
  %188 = extractelement <4 x float> %call38, i32 1
  %mul75 = fmul float %187, %188
  %189 = call float @llvm.fmuladd.f32(float %185, float %186, float %mul75)
  %190 = extractelement <4 x float> %call29, i32 2
  %191 = extractelement <4 x float> %call43, i32 1
  %192 = call float @llvm.fmuladd.f32(float %190, float %191, float %189)
  %193 = extractelement <4 x float> %call29, i32 3
  %194 = extractelement <4 x float> %call48, i32 1
  %195 = call float @llvm.fmuladd.f32(float %193, float %194, float %192)
  %196 = extractelement <4 x float> %184, i32 1
  %add76 = fadd float %196, %195
  %197 = insertelement <4 x float> %184, float %add76, i32 1
  %198 = extractelement <4 x float> %call29, i32 0
  %199 = extractelement <4 x float> %call33, i32 2
  %200 = extractelement <4 x float> %call29, i32 1
  %201 = extractelement <4 x float> %call38, i32 2
  %mul77 = fmul float %200, %201
  %202 = call float @llvm.fmuladd.f32(float %198, float %199, float %mul77)
  %203 = extractelement <4 x float> %call29, i32 2
  %204 = extractelement <4 x float> %call43, i32 2
  %205 = call float @llvm.fmuladd.f32(float %203, float %204, float %202)
  %206 = extractelement <4 x float> %call29, i32 3
  %207 = extractelement <4 x float> %call48, i32 2
  %208 = call float @llvm.fmuladd.f32(float %206, float %207, float %205)
  %209 = extractelement <4 x float> %197, i32 2
  %add78 = fadd float %209, %208
  %210 = insertelement <4 x float> %197, float %add78, i32 2
  %211 = extractelement <4 x float> %call29, i32 0
  %212 = extractelement <4 x float> %call33, i32 3
  %213 = extractelement <4 x float> %call29, i32 1
  %214 = extractelement <4 x float> %call38, i32 3
  %mul79 = fmul float %213, %214
  %215 = call float @llvm.fmuladd.f32(float %211, float %212, float %mul79)
  %216 = extractelement <4 x float> %call29, i32 2
  %217 = extractelement <4 x float> %call43, i32 3
  %218 = call float @llvm.fmuladd.f32(float %216, float %217, float %215)
  %219 = extractelement <4 x float> %call29, i32 3
  %220 = extractelement <4 x float> %call48, i32 3
  %221 = call float @llvm.fmuladd.f32(float %219, float %220, float %218)
  %222 = extractelement <4 x float> %210, i32 3
  %add80 = fadd float %222, %221
  %223 = insertelement <4 x float> %210, float %add80, i32 3
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %add81 = add nsw i32 %i.0, 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %224 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit83 = insertelement <2 x i32> undef, i32 %224, i32 0
  %225 = extractelement <2 x i32> %vecinit3, i32 1
  %mul = mul nsw i32 %225, 4
  %vecinit84 = insertelement <2 x i32> %vecinit83, i32 %mul, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit84, <4 x float> %sum0.0)
  %226 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit86 = insertelement <2 x i32> undef, i32 %226, i32 0
  %227 = extractelement <2 x i32> %vecinit3, i32 1
  %mul87 = mul nsw i32 %227, 4
  %add88 = add nsw i32 %mul87, 1
  %vecinit89 = insertelement <2 x i32> %vecinit86, i32 %add88, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit89, <4 x float> %sum1.0)
  %228 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit91 = insertelement <2 x i32> undef, i32 %228, i32 0
  %229 = extractelement <2 x i32> %vecinit3, i32 1
  %mul92 = mul nsw i32 %229, 4
  %add93 = add nsw i32 %mul92, 2
  %vecinit94 = insertelement <2 x i32> %vecinit91, i32 %add93, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit94, <4 x float> %sum2.0)
  %230 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit96 = insertelement <2 x i32> undef, i32 %230, i32 0
  %231 = extractelement <2 x i32> %vecinit3, i32 1
  %mul97 = mul nsw i32 %231, 4
  %add98 = add nsw i32 %mul97, 3
  %vecinit99 = insertelement <2 x i32> %vecinit96, i32 %add98, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit99, <4 x float> %sum3.0)
  ret void
}

; Function Attrs: nounwind readnone
declare cc75 i64 @_Z13get_global_idj(i32) #1

; Function Attrs: nounwind readnone
declare cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)*, i32, <2 x i32>) #1

; Function Attrs: nounwind readnone
declare float @llvm.fmuladd.f32(float, float, float) #1

declare cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)*, <2 x i32>, <4 x float>)

; Function Attrs: nounwind
define cc76 void @__OpenCL_mmmKernel2_kernel(%opencl.image2d_t addrspace(1)* %matrixA, %opencl.image2d_t addrspace(1)* %matrixB, %opencl.image2d_t addrspace(1)* %matrixC, i32 %widthA, i32 %widthB) #0 {
entry:
  %call = call cc75 i64 @_Z13get_global_idj(i32 0) #1
  %conv = trunc i64 %call to i32
  %vecinit = insertelement <2 x i32> undef, i32 %conv, i32 0
  %call1 = call cc75 i64 @_Z13get_global_idj(i32 1) #1
  %conv2 = trunc i64 %call1 to i32
  %vecinit3 = insertelement <2 x i32> %vecinit, i32 %conv2, i32 1
  %shr = lshr i32 %widthB, 2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %sum1.0 = phi <4 x float> [ zeroinitializer, %entry ], [ %127, %for.inc ]
  %sum0.0 = phi <4 x float> [ zeroinitializer, %entry ], [ %75, %for.inc ]
  %sum2.0 = phi <4 x float> [ zeroinitializer, %entry ], [ %179, %for.inc ]
  %sum3.0 = phi <4 x float> [ zeroinitializer, %entry ], [ %231, %for.inc ]
  %sum4.0 = phi <4 x float> [ zeroinitializer, %entry ], [ %283, %for.inc ]
  %sum5.0 = phi <4 x float> [ zeroinitializer, %entry ], [ %335, %for.inc ]
  %sum6.0 = phi <4 x float> [ zeroinitializer, %entry ], [ %387, %for.inc ]
  %sum7.0 = phi <4 x float> [ zeroinitializer, %entry ], [ %439, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %add141, %for.inc ]
  %cmp = icmp ult i32 %i.0, %widthA
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %0 = load i32 addrspace(2)* @imageSampler, align 4
  %shr6 = ashr i32 %i.0, 2
  %vecinit7 = insertelement <2 x i32> undef, i32 %shr6, i32 0
  %1 = extractelement <2 x i32> %vecinit3, i32 1
  %shl = shl i32 %1, 3
  %vecinit8 = insertelement <2 x i32> %vecinit7, i32 %shl, i32 1
  %call9 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %0, <2 x i32> %vecinit8) #1
  %2 = load i32 addrspace(2)* @imageSampler, align 4
  %shr11 = ashr i32 %i.0, 2
  %vecinit12 = insertelement <2 x i32> undef, i32 %shr11, i32 0
  %3 = extractelement <2 x i32> %vecinit3, i32 1
  %shl13 = shl i32 %3, 3
  %add = add nsw i32 %shl13, 1
  %vecinit14 = insertelement <2 x i32> %vecinit12, i32 %add, i32 1
  %call15 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %2, <2 x i32> %vecinit14) #1
  %4 = load i32 addrspace(2)* @imageSampler, align 4
  %shr17 = ashr i32 %i.0, 2
  %vecinit18 = insertelement <2 x i32> undef, i32 %shr17, i32 0
  %5 = extractelement <2 x i32> %vecinit3, i32 1
  %shl19 = shl i32 %5, 3
  %add20 = add nsw i32 %shl19, 2
  %vecinit21 = insertelement <2 x i32> %vecinit18, i32 %add20, i32 1
  %call22 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %4, <2 x i32> %vecinit21) #1
  %6 = load i32 addrspace(2)* @imageSampler, align 4
  %shr24 = ashr i32 %i.0, 2
  %vecinit25 = insertelement <2 x i32> undef, i32 %shr24, i32 0
  %7 = extractelement <2 x i32> %vecinit3, i32 1
  %shl26 = shl i32 %7, 3
  %add27 = add nsw i32 %shl26, 3
  %vecinit28 = insertelement <2 x i32> %vecinit25, i32 %add27, i32 1
  %call29 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %6, <2 x i32> %vecinit28) #1
  %8 = load i32 addrspace(2)* @imageSampler, align 4
  %shr31 = ashr i32 %i.0, 2
  %vecinit32 = insertelement <2 x i32> undef, i32 %shr31, i32 0
  %9 = extractelement <2 x i32> %vecinit3, i32 1
  %shl33 = shl i32 %9, 3
  %add34 = add nsw i32 %shl33, 4
  %vecinit35 = insertelement <2 x i32> %vecinit32, i32 %add34, i32 1
  %call36 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %8, <2 x i32> %vecinit35) #1
  %10 = load i32 addrspace(2)* @imageSampler, align 4
  %shr38 = ashr i32 %i.0, 2
  %vecinit39 = insertelement <2 x i32> undef, i32 %shr38, i32 0
  %11 = extractelement <2 x i32> %vecinit3, i32 1
  %shl40 = shl i32 %11, 3
  %add41 = add nsw i32 %shl40, 5
  %vecinit42 = insertelement <2 x i32> %vecinit39, i32 %add41, i32 1
  %call43 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %10, <2 x i32> %vecinit42) #1
  %12 = load i32 addrspace(2)* @imageSampler, align 4
  %shr45 = ashr i32 %i.0, 2
  %vecinit46 = insertelement <2 x i32> undef, i32 %shr45, i32 0
  %13 = extractelement <2 x i32> %vecinit3, i32 1
  %shl47 = shl i32 %13, 3
  %add48 = add nsw i32 %shl47, 6
  %vecinit49 = insertelement <2 x i32> %vecinit46, i32 %add48, i32 1
  %call50 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %12, <2 x i32> %vecinit49) #1
  %14 = load i32 addrspace(2)* @imageSampler, align 4
  %shr52 = ashr i32 %i.0, 2
  %vecinit53 = insertelement <2 x i32> undef, i32 %shr52, i32 0
  %15 = extractelement <2 x i32> %vecinit3, i32 1
  %shl54 = shl i32 %15, 3
  %add55 = add nsw i32 %shl54, 7
  %vecinit56 = insertelement <2 x i32> %vecinit53, i32 %add55, i32 1
  %call57 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %14, <2 x i32> %vecinit56) #1
  %16 = load i32 addrspace(2)* @imageSampler, align 4
  %17 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit59 = insertelement <2 x i32> undef, i32 %17, i32 0
  %vecinit60 = insertelement <2 x i32> %vecinit59, i32 %i.0, i32 1
  %call61 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %16, <2 x i32> %vecinit60) #1
  %18 = load i32 addrspace(2)* @imageSampler, align 4
  %19 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit63 = insertelement <2 x i32> undef, i32 %19, i32 0
  %add64 = add nsw i32 %i.0, 1
  %vecinit65 = insertelement <2 x i32> %vecinit63, i32 %add64, i32 1
  %call66 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %18, <2 x i32> %vecinit65) #1
  %20 = load i32 addrspace(2)* @imageSampler, align 4
  %21 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit68 = insertelement <2 x i32> undef, i32 %21, i32 0
  %add69 = add nsw i32 %i.0, 2
  %vecinit70 = insertelement <2 x i32> %vecinit68, i32 %add69, i32 1
  %call71 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %20, <2 x i32> %vecinit70) #1
  %22 = load i32 addrspace(2)* @imageSampler, align 4
  %23 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit73 = insertelement <2 x i32> undef, i32 %23, i32 0
  %add74 = add nsw i32 %i.0, 3
  %vecinit75 = insertelement <2 x i32> %vecinit73, i32 %add74, i32 1
  %call76 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %22, <2 x i32> %vecinit75) #1
  %24 = extractelement <4 x float> %call9, i32 0
  %25 = extractelement <4 x float> %call61, i32 0
  %26 = extractelement <4 x float> %call9, i32 1
  %27 = extractelement <4 x float> %call66, i32 0
  %mul77 = fmul float %26, %27
  %28 = call float @llvm.fmuladd.f32(float %24, float %25, float %mul77)
  %29 = extractelement <4 x float> %call9, i32 2
  %30 = extractelement <4 x float> %call71, i32 0
  %31 = call float @llvm.fmuladd.f32(float %29, float %30, float %28)
  %32 = extractelement <4 x float> %call9, i32 3
  %33 = extractelement <4 x float> %call76, i32 0
  %34 = call float @llvm.fmuladd.f32(float %32, float %33, float %31)
  %35 = extractelement <4 x float> %sum0.0, i32 0
  %add78 = fadd float %35, %34
  %36 = insertelement <4 x float> %sum0.0, float %add78, i32 0
  %37 = extractelement <4 x float> %call9, i32 0
  %38 = extractelement <4 x float> %call61, i32 1
  %39 = extractelement <4 x float> %call9, i32 1
  %40 = extractelement <4 x float> %call66, i32 1
  %mul79 = fmul float %39, %40
  %41 = call float @llvm.fmuladd.f32(float %37, float %38, float %mul79)
  %42 = extractelement <4 x float> %call9, i32 2
  %43 = extractelement <4 x float> %call71, i32 1
  %44 = call float @llvm.fmuladd.f32(float %42, float %43, float %41)
  %45 = extractelement <4 x float> %call9, i32 3
  %46 = extractelement <4 x float> %call76, i32 1
  %47 = call float @llvm.fmuladd.f32(float %45, float %46, float %44)
  %48 = extractelement <4 x float> %36, i32 1
  %add80 = fadd float %48, %47
  %49 = insertelement <4 x float> %36, float %add80, i32 1
  %50 = extractelement <4 x float> %call9, i32 0
  %51 = extractelement <4 x float> %call61, i32 2
  %52 = extractelement <4 x float> %call9, i32 1
  %53 = extractelement <4 x float> %call66, i32 2
  %mul81 = fmul float %52, %53
  %54 = call float @llvm.fmuladd.f32(float %50, float %51, float %mul81)
  %55 = extractelement <4 x float> %call9, i32 2
  %56 = extractelement <4 x float> %call71, i32 2
  %57 = call float @llvm.fmuladd.f32(float %55, float %56, float %54)
  %58 = extractelement <4 x float> %call9, i32 3
  %59 = extractelement <4 x float> %call76, i32 2
  %60 = call float @llvm.fmuladd.f32(float %58, float %59, float %57)
  %61 = extractelement <4 x float> %49, i32 2
  %add82 = fadd float %61, %60
  %62 = insertelement <4 x float> %49, float %add82, i32 2
  %63 = extractelement <4 x float> %call9, i32 0
  %64 = extractelement <4 x float> %call61, i32 3
  %65 = extractelement <4 x float> %call9, i32 1
  %66 = extractelement <4 x float> %call66, i32 3
  %mul83 = fmul float %65, %66
  %67 = call float @llvm.fmuladd.f32(float %63, float %64, float %mul83)
  %68 = extractelement <4 x float> %call9, i32 2
  %69 = extractelement <4 x float> %call71, i32 3
  %70 = call float @llvm.fmuladd.f32(float %68, float %69, float %67)
  %71 = extractelement <4 x float> %call9, i32 3
  %72 = extractelement <4 x float> %call76, i32 3
  %73 = call float @llvm.fmuladd.f32(float %71, float %72, float %70)
  %74 = extractelement <4 x float> %62, i32 3
  %add84 = fadd float %74, %73
  %75 = insertelement <4 x float> %62, float %add84, i32 3
  %76 = extractelement <4 x float> %call15, i32 0
  %77 = extractelement <4 x float> %call61, i32 0
  %78 = extractelement <4 x float> %call15, i32 1
  %79 = extractelement <4 x float> %call66, i32 0
  %mul85 = fmul float %78, %79
  %80 = call float @llvm.fmuladd.f32(float %76, float %77, float %mul85)
  %81 = extractelement <4 x float> %call15, i32 2
  %82 = extractelement <4 x float> %call71, i32 0
  %83 = call float @llvm.fmuladd.f32(float %81, float %82, float %80)
  %84 = extractelement <4 x float> %call15, i32 3
  %85 = extractelement <4 x float> %call76, i32 0
  %86 = call float @llvm.fmuladd.f32(float %84, float %85, float %83)
  %87 = extractelement <4 x float> %sum1.0, i32 0
  %add86 = fadd float %87, %86
  %88 = insertelement <4 x float> %sum1.0, float %add86, i32 0
  %89 = extractelement <4 x float> %call15, i32 0
  %90 = extractelement <4 x float> %call61, i32 1
  %91 = extractelement <4 x float> %call15, i32 1
  %92 = extractelement <4 x float> %call66, i32 1
  %mul87 = fmul float %91, %92
  %93 = call float @llvm.fmuladd.f32(float %89, float %90, float %mul87)
  %94 = extractelement <4 x float> %call15, i32 2
  %95 = extractelement <4 x float> %call71, i32 1
  %96 = call float @llvm.fmuladd.f32(float %94, float %95, float %93)
  %97 = extractelement <4 x float> %call15, i32 3
  %98 = extractelement <4 x float> %call76, i32 1
  %99 = call float @llvm.fmuladd.f32(float %97, float %98, float %96)
  %100 = extractelement <4 x float> %88, i32 1
  %add88 = fadd float %100, %99
  %101 = insertelement <4 x float> %88, float %add88, i32 1
  %102 = extractelement <4 x float> %call15, i32 0
  %103 = extractelement <4 x float> %call61, i32 2
  %104 = extractelement <4 x float> %call15, i32 1
  %105 = extractelement <4 x float> %call66, i32 2
  %mul89 = fmul float %104, %105
  %106 = call float @llvm.fmuladd.f32(float %102, float %103, float %mul89)
  %107 = extractelement <4 x float> %call15, i32 2
  %108 = extractelement <4 x float> %call71, i32 2
  %109 = call float @llvm.fmuladd.f32(float %107, float %108, float %106)
  %110 = extractelement <4 x float> %call15, i32 3
  %111 = extractelement <4 x float> %call76, i32 2
  %112 = call float @llvm.fmuladd.f32(float %110, float %111, float %109)
  %113 = extractelement <4 x float> %101, i32 2
  %add90 = fadd float %113, %112
  %114 = insertelement <4 x float> %101, float %add90, i32 2
  %115 = extractelement <4 x float> %call15, i32 0
  %116 = extractelement <4 x float> %call61, i32 3
  %117 = extractelement <4 x float> %call15, i32 1
  %118 = extractelement <4 x float> %call66, i32 3
  %mul91 = fmul float %117, %118
  %119 = call float @llvm.fmuladd.f32(float %115, float %116, float %mul91)
  %120 = extractelement <4 x float> %call15, i32 2
  %121 = extractelement <4 x float> %call71, i32 3
  %122 = call float @llvm.fmuladd.f32(float %120, float %121, float %119)
  %123 = extractelement <4 x float> %call15, i32 3
  %124 = extractelement <4 x float> %call76, i32 3
  %125 = call float @llvm.fmuladd.f32(float %123, float %124, float %122)
  %126 = extractelement <4 x float> %114, i32 3
  %add92 = fadd float %126, %125
  %127 = insertelement <4 x float> %114, float %add92, i32 3
  %128 = extractelement <4 x float> %call22, i32 0
  %129 = extractelement <4 x float> %call61, i32 0
  %130 = extractelement <4 x float> %call22, i32 1
  %131 = extractelement <4 x float> %call66, i32 0
  %mul93 = fmul float %130, %131
  %132 = call float @llvm.fmuladd.f32(float %128, float %129, float %mul93)
  %133 = extractelement <4 x float> %call22, i32 2
  %134 = extractelement <4 x float> %call71, i32 0
  %135 = call float @llvm.fmuladd.f32(float %133, float %134, float %132)
  %136 = extractelement <4 x float> %call22, i32 3
  %137 = extractelement <4 x float> %call76, i32 0
  %138 = call float @llvm.fmuladd.f32(float %136, float %137, float %135)
  %139 = extractelement <4 x float> %sum2.0, i32 0
  %add94 = fadd float %139, %138
  %140 = insertelement <4 x float> %sum2.0, float %add94, i32 0
  %141 = extractelement <4 x float> %call22, i32 0
  %142 = extractelement <4 x float> %call61, i32 1
  %143 = extractelement <4 x float> %call22, i32 1
  %144 = extractelement <4 x float> %call66, i32 1
  %mul95 = fmul float %143, %144
  %145 = call float @llvm.fmuladd.f32(float %141, float %142, float %mul95)
  %146 = extractelement <4 x float> %call22, i32 2
  %147 = extractelement <4 x float> %call71, i32 1
  %148 = call float @llvm.fmuladd.f32(float %146, float %147, float %145)
  %149 = extractelement <4 x float> %call22, i32 3
  %150 = extractelement <4 x float> %call76, i32 1
  %151 = call float @llvm.fmuladd.f32(float %149, float %150, float %148)
  %152 = extractelement <4 x float> %140, i32 1
  %add96 = fadd float %152, %151
  %153 = insertelement <4 x float> %140, float %add96, i32 1
  %154 = extractelement <4 x float> %call22, i32 0
  %155 = extractelement <4 x float> %call61, i32 2
  %156 = extractelement <4 x float> %call22, i32 1
  %157 = extractelement <4 x float> %call66, i32 2
  %mul97 = fmul float %156, %157
  %158 = call float @llvm.fmuladd.f32(float %154, float %155, float %mul97)
  %159 = extractelement <4 x float> %call22, i32 2
  %160 = extractelement <4 x float> %call71, i32 2
  %161 = call float @llvm.fmuladd.f32(float %159, float %160, float %158)
  %162 = extractelement <4 x float> %call22, i32 3
  %163 = extractelement <4 x float> %call76, i32 2
  %164 = call float @llvm.fmuladd.f32(float %162, float %163, float %161)
  %165 = extractelement <4 x float> %153, i32 2
  %add98 = fadd float %165, %164
  %166 = insertelement <4 x float> %153, float %add98, i32 2
  %167 = extractelement <4 x float> %call22, i32 0
  %168 = extractelement <4 x float> %call61, i32 3
  %169 = extractelement <4 x float> %call22, i32 1
  %170 = extractelement <4 x float> %call66, i32 3
  %mul99 = fmul float %169, %170
  %171 = call float @llvm.fmuladd.f32(float %167, float %168, float %mul99)
  %172 = extractelement <4 x float> %call22, i32 2
  %173 = extractelement <4 x float> %call71, i32 3
  %174 = call float @llvm.fmuladd.f32(float %172, float %173, float %171)
  %175 = extractelement <4 x float> %call22, i32 3
  %176 = extractelement <4 x float> %call76, i32 3
  %177 = call float @llvm.fmuladd.f32(float %175, float %176, float %174)
  %178 = extractelement <4 x float> %166, i32 3
  %add100 = fadd float %178, %177
  %179 = insertelement <4 x float> %166, float %add100, i32 3
  %180 = extractelement <4 x float> %call29, i32 0
  %181 = extractelement <4 x float> %call61, i32 0
  %182 = extractelement <4 x float> %call29, i32 1
  %183 = extractelement <4 x float> %call66, i32 0
  %mul101 = fmul float %182, %183
  %184 = call float @llvm.fmuladd.f32(float %180, float %181, float %mul101)
  %185 = extractelement <4 x float> %call29, i32 2
  %186 = extractelement <4 x float> %call71, i32 0
  %187 = call float @llvm.fmuladd.f32(float %185, float %186, float %184)
  %188 = extractelement <4 x float> %call29, i32 3
  %189 = extractelement <4 x float> %call76, i32 0
  %190 = call float @llvm.fmuladd.f32(float %188, float %189, float %187)
  %191 = extractelement <4 x float> %sum3.0, i32 0
  %add102 = fadd float %191, %190
  %192 = insertelement <4 x float> %sum3.0, float %add102, i32 0
  %193 = extractelement <4 x float> %call29, i32 0
  %194 = extractelement <4 x float> %call61, i32 1
  %195 = extractelement <4 x float> %call29, i32 1
  %196 = extractelement <4 x float> %call66, i32 1
  %mul103 = fmul float %195, %196
  %197 = call float @llvm.fmuladd.f32(float %193, float %194, float %mul103)
  %198 = extractelement <4 x float> %call29, i32 2
  %199 = extractelement <4 x float> %call71, i32 1
  %200 = call float @llvm.fmuladd.f32(float %198, float %199, float %197)
  %201 = extractelement <4 x float> %call29, i32 3
  %202 = extractelement <4 x float> %call76, i32 1
  %203 = call float @llvm.fmuladd.f32(float %201, float %202, float %200)
  %204 = extractelement <4 x float> %192, i32 1
  %add104 = fadd float %204, %203
  %205 = insertelement <4 x float> %192, float %add104, i32 1
  %206 = extractelement <4 x float> %call29, i32 0
  %207 = extractelement <4 x float> %call61, i32 2
  %208 = extractelement <4 x float> %call29, i32 1
  %209 = extractelement <4 x float> %call66, i32 2
  %mul105 = fmul float %208, %209
  %210 = call float @llvm.fmuladd.f32(float %206, float %207, float %mul105)
  %211 = extractelement <4 x float> %call29, i32 2
  %212 = extractelement <4 x float> %call71, i32 2
  %213 = call float @llvm.fmuladd.f32(float %211, float %212, float %210)
  %214 = extractelement <4 x float> %call29, i32 3
  %215 = extractelement <4 x float> %call76, i32 2
  %216 = call float @llvm.fmuladd.f32(float %214, float %215, float %213)
  %217 = extractelement <4 x float> %205, i32 2
  %add106 = fadd float %217, %216
  %218 = insertelement <4 x float> %205, float %add106, i32 2
  %219 = extractelement <4 x float> %call29, i32 0
  %220 = extractelement <4 x float> %call61, i32 3
  %221 = extractelement <4 x float> %call29, i32 1
  %222 = extractelement <4 x float> %call66, i32 3
  %mul107 = fmul float %221, %222
  %223 = call float @llvm.fmuladd.f32(float %219, float %220, float %mul107)
  %224 = extractelement <4 x float> %call29, i32 2
  %225 = extractelement <4 x float> %call71, i32 3
  %226 = call float @llvm.fmuladd.f32(float %224, float %225, float %223)
  %227 = extractelement <4 x float> %call29, i32 3
  %228 = extractelement <4 x float> %call76, i32 3
  %229 = call float @llvm.fmuladd.f32(float %227, float %228, float %226)
  %230 = extractelement <4 x float> %218, i32 3
  %add108 = fadd float %230, %229
  %231 = insertelement <4 x float> %218, float %add108, i32 3
  %232 = extractelement <4 x float> %call36, i32 0
  %233 = extractelement <4 x float> %call61, i32 0
  %234 = extractelement <4 x float> %call36, i32 1
  %235 = extractelement <4 x float> %call66, i32 0
  %mul109 = fmul float %234, %235
  %236 = call float @llvm.fmuladd.f32(float %232, float %233, float %mul109)
  %237 = extractelement <4 x float> %call36, i32 2
  %238 = extractelement <4 x float> %call71, i32 0
  %239 = call float @llvm.fmuladd.f32(float %237, float %238, float %236)
  %240 = extractelement <4 x float> %call36, i32 3
  %241 = extractelement <4 x float> %call76, i32 0
  %242 = call float @llvm.fmuladd.f32(float %240, float %241, float %239)
  %243 = extractelement <4 x float> %sum4.0, i32 0
  %add110 = fadd float %243, %242
  %244 = insertelement <4 x float> %sum4.0, float %add110, i32 0
  %245 = extractelement <4 x float> %call36, i32 0
  %246 = extractelement <4 x float> %call61, i32 1
  %247 = extractelement <4 x float> %call36, i32 1
  %248 = extractelement <4 x float> %call66, i32 1
  %mul111 = fmul float %247, %248
  %249 = call float @llvm.fmuladd.f32(float %245, float %246, float %mul111)
  %250 = extractelement <4 x float> %call36, i32 2
  %251 = extractelement <4 x float> %call71, i32 1
  %252 = call float @llvm.fmuladd.f32(float %250, float %251, float %249)
  %253 = extractelement <4 x float> %call36, i32 3
  %254 = extractelement <4 x float> %call76, i32 1
  %255 = call float @llvm.fmuladd.f32(float %253, float %254, float %252)
  %256 = extractelement <4 x float> %244, i32 1
  %add112 = fadd float %256, %255
  %257 = insertelement <4 x float> %244, float %add112, i32 1
  %258 = extractelement <4 x float> %call36, i32 0
  %259 = extractelement <4 x float> %call61, i32 2
  %260 = extractelement <4 x float> %call36, i32 1
  %261 = extractelement <4 x float> %call66, i32 2
  %mul113 = fmul float %260, %261
  %262 = call float @llvm.fmuladd.f32(float %258, float %259, float %mul113)
  %263 = extractelement <4 x float> %call36, i32 2
  %264 = extractelement <4 x float> %call71, i32 2
  %265 = call float @llvm.fmuladd.f32(float %263, float %264, float %262)
  %266 = extractelement <4 x float> %call36, i32 3
  %267 = extractelement <4 x float> %call76, i32 2
  %268 = call float @llvm.fmuladd.f32(float %266, float %267, float %265)
  %269 = extractelement <4 x float> %257, i32 2
  %add114 = fadd float %269, %268
  %270 = insertelement <4 x float> %257, float %add114, i32 2
  %271 = extractelement <4 x float> %call36, i32 0
  %272 = extractelement <4 x float> %call61, i32 3
  %273 = extractelement <4 x float> %call36, i32 1
  %274 = extractelement <4 x float> %call66, i32 3
  %mul115 = fmul float %273, %274
  %275 = call float @llvm.fmuladd.f32(float %271, float %272, float %mul115)
  %276 = extractelement <4 x float> %call36, i32 2
  %277 = extractelement <4 x float> %call71, i32 3
  %278 = call float @llvm.fmuladd.f32(float %276, float %277, float %275)
  %279 = extractelement <4 x float> %call36, i32 3
  %280 = extractelement <4 x float> %call76, i32 3
  %281 = call float @llvm.fmuladd.f32(float %279, float %280, float %278)
  %282 = extractelement <4 x float> %270, i32 3
  %add116 = fadd float %282, %281
  %283 = insertelement <4 x float> %270, float %add116, i32 3
  %284 = extractelement <4 x float> %call43, i32 0
  %285 = extractelement <4 x float> %call61, i32 0
  %286 = extractelement <4 x float> %call43, i32 1
  %287 = extractelement <4 x float> %call66, i32 0
  %mul117 = fmul float %286, %287
  %288 = call float @llvm.fmuladd.f32(float %284, float %285, float %mul117)
  %289 = extractelement <4 x float> %call43, i32 2
  %290 = extractelement <4 x float> %call71, i32 0
  %291 = call float @llvm.fmuladd.f32(float %289, float %290, float %288)
  %292 = extractelement <4 x float> %call43, i32 3
  %293 = extractelement <4 x float> %call76, i32 0
  %294 = call float @llvm.fmuladd.f32(float %292, float %293, float %291)
  %295 = extractelement <4 x float> %sum5.0, i32 0
  %add118 = fadd float %295, %294
  %296 = insertelement <4 x float> %sum5.0, float %add118, i32 0
  %297 = extractelement <4 x float> %call43, i32 0
  %298 = extractelement <4 x float> %call61, i32 1
  %299 = extractelement <4 x float> %call43, i32 1
  %300 = extractelement <4 x float> %call66, i32 1
  %mul119 = fmul float %299, %300
  %301 = call float @llvm.fmuladd.f32(float %297, float %298, float %mul119)
  %302 = extractelement <4 x float> %call43, i32 2
  %303 = extractelement <4 x float> %call71, i32 1
  %304 = call float @llvm.fmuladd.f32(float %302, float %303, float %301)
  %305 = extractelement <4 x float> %call43, i32 3
  %306 = extractelement <4 x float> %call76, i32 1
  %307 = call float @llvm.fmuladd.f32(float %305, float %306, float %304)
  %308 = extractelement <4 x float> %296, i32 1
  %add120 = fadd float %308, %307
  %309 = insertelement <4 x float> %296, float %add120, i32 1
  %310 = extractelement <4 x float> %call43, i32 0
  %311 = extractelement <4 x float> %call61, i32 2
  %312 = extractelement <4 x float> %call43, i32 1
  %313 = extractelement <4 x float> %call66, i32 2
  %mul121 = fmul float %312, %313
  %314 = call float @llvm.fmuladd.f32(float %310, float %311, float %mul121)
  %315 = extractelement <4 x float> %call43, i32 2
  %316 = extractelement <4 x float> %call71, i32 2
  %317 = call float @llvm.fmuladd.f32(float %315, float %316, float %314)
  %318 = extractelement <4 x float> %call43, i32 3
  %319 = extractelement <4 x float> %call76, i32 2
  %320 = call float @llvm.fmuladd.f32(float %318, float %319, float %317)
  %321 = extractelement <4 x float> %309, i32 2
  %add122 = fadd float %321, %320
  %322 = insertelement <4 x float> %309, float %add122, i32 2
  %323 = extractelement <4 x float> %call43, i32 0
  %324 = extractelement <4 x float> %call61, i32 3
  %325 = extractelement <4 x float> %call43, i32 1
  %326 = extractelement <4 x float> %call66, i32 3
  %mul123 = fmul float %325, %326
  %327 = call float @llvm.fmuladd.f32(float %323, float %324, float %mul123)
  %328 = extractelement <4 x float> %call43, i32 2
  %329 = extractelement <4 x float> %call71, i32 3
  %330 = call float @llvm.fmuladd.f32(float %328, float %329, float %327)
  %331 = extractelement <4 x float> %call43, i32 3
  %332 = extractelement <4 x float> %call76, i32 3
  %333 = call float @llvm.fmuladd.f32(float %331, float %332, float %330)
  %334 = extractelement <4 x float> %322, i32 3
  %add124 = fadd float %334, %333
  %335 = insertelement <4 x float> %322, float %add124, i32 3
  %336 = extractelement <4 x float> %call50, i32 0
  %337 = extractelement <4 x float> %call61, i32 0
  %338 = extractelement <4 x float> %call50, i32 1
  %339 = extractelement <4 x float> %call66, i32 0
  %mul125 = fmul float %338, %339
  %340 = call float @llvm.fmuladd.f32(float %336, float %337, float %mul125)
  %341 = extractelement <4 x float> %call50, i32 2
  %342 = extractelement <4 x float> %call71, i32 0
  %343 = call float @llvm.fmuladd.f32(float %341, float %342, float %340)
  %344 = extractelement <4 x float> %call50, i32 3
  %345 = extractelement <4 x float> %call76, i32 0
  %346 = call float @llvm.fmuladd.f32(float %344, float %345, float %343)
  %347 = extractelement <4 x float> %sum6.0, i32 0
  %add126 = fadd float %347, %346
  %348 = insertelement <4 x float> %sum6.0, float %add126, i32 0
  %349 = extractelement <4 x float> %call50, i32 0
  %350 = extractelement <4 x float> %call61, i32 1
  %351 = extractelement <4 x float> %call50, i32 1
  %352 = extractelement <4 x float> %call66, i32 1
  %mul127 = fmul float %351, %352
  %353 = call float @llvm.fmuladd.f32(float %349, float %350, float %mul127)
  %354 = extractelement <4 x float> %call50, i32 2
  %355 = extractelement <4 x float> %call71, i32 1
  %356 = call float @llvm.fmuladd.f32(float %354, float %355, float %353)
  %357 = extractelement <4 x float> %call50, i32 3
  %358 = extractelement <4 x float> %call76, i32 1
  %359 = call float @llvm.fmuladd.f32(float %357, float %358, float %356)
  %360 = extractelement <4 x float> %348, i32 1
  %add128 = fadd float %360, %359
  %361 = insertelement <4 x float> %348, float %add128, i32 1
  %362 = extractelement <4 x float> %call50, i32 0
  %363 = extractelement <4 x float> %call61, i32 2
  %364 = extractelement <4 x float> %call50, i32 1
  %365 = extractelement <4 x float> %call66, i32 2
  %mul129 = fmul float %364, %365
  %366 = call float @llvm.fmuladd.f32(float %362, float %363, float %mul129)
  %367 = extractelement <4 x float> %call50, i32 2
  %368 = extractelement <4 x float> %call71, i32 2
  %369 = call float @llvm.fmuladd.f32(float %367, float %368, float %366)
  %370 = extractelement <4 x float> %call50, i32 3
  %371 = extractelement <4 x float> %call76, i32 2
  %372 = call float @llvm.fmuladd.f32(float %370, float %371, float %369)
  %373 = extractelement <4 x float> %361, i32 2
  %add130 = fadd float %373, %372
  %374 = insertelement <4 x float> %361, float %add130, i32 2
  %375 = extractelement <4 x float> %call50, i32 0
  %376 = extractelement <4 x float> %call61, i32 3
  %377 = extractelement <4 x float> %call50, i32 1
  %378 = extractelement <4 x float> %call66, i32 3
  %mul131 = fmul float %377, %378
  %379 = call float @llvm.fmuladd.f32(float %375, float %376, float %mul131)
  %380 = extractelement <4 x float> %call50, i32 2
  %381 = extractelement <4 x float> %call71, i32 3
  %382 = call float @llvm.fmuladd.f32(float %380, float %381, float %379)
  %383 = extractelement <4 x float> %call50, i32 3
  %384 = extractelement <4 x float> %call76, i32 3
  %385 = call float @llvm.fmuladd.f32(float %383, float %384, float %382)
  %386 = extractelement <4 x float> %374, i32 3
  %add132 = fadd float %386, %385
  %387 = insertelement <4 x float> %374, float %add132, i32 3
  %388 = extractelement <4 x float> %call57, i32 0
  %389 = extractelement <4 x float> %call61, i32 0
  %390 = extractelement <4 x float> %call57, i32 1
  %391 = extractelement <4 x float> %call66, i32 0
  %mul133 = fmul float %390, %391
  %392 = call float @llvm.fmuladd.f32(float %388, float %389, float %mul133)
  %393 = extractelement <4 x float> %call57, i32 2
  %394 = extractelement <4 x float> %call71, i32 0
  %395 = call float @llvm.fmuladd.f32(float %393, float %394, float %392)
  %396 = extractelement <4 x float> %call57, i32 3
  %397 = extractelement <4 x float> %call76, i32 0
  %398 = call float @llvm.fmuladd.f32(float %396, float %397, float %395)
  %399 = extractelement <4 x float> %sum7.0, i32 0
  %add134 = fadd float %399, %398
  %400 = insertelement <4 x float> %sum7.0, float %add134, i32 0
  %401 = extractelement <4 x float> %call57, i32 0
  %402 = extractelement <4 x float> %call61, i32 1
  %403 = extractelement <4 x float> %call57, i32 1
  %404 = extractelement <4 x float> %call66, i32 1
  %mul135 = fmul float %403, %404
  %405 = call float @llvm.fmuladd.f32(float %401, float %402, float %mul135)
  %406 = extractelement <4 x float> %call57, i32 2
  %407 = extractelement <4 x float> %call71, i32 1
  %408 = call float @llvm.fmuladd.f32(float %406, float %407, float %405)
  %409 = extractelement <4 x float> %call57, i32 3
  %410 = extractelement <4 x float> %call76, i32 1
  %411 = call float @llvm.fmuladd.f32(float %409, float %410, float %408)
  %412 = extractelement <4 x float> %400, i32 1
  %add136 = fadd float %412, %411
  %413 = insertelement <4 x float> %400, float %add136, i32 1
  %414 = extractelement <4 x float> %call57, i32 0
  %415 = extractelement <4 x float> %call61, i32 2
  %416 = extractelement <4 x float> %call57, i32 1
  %417 = extractelement <4 x float> %call66, i32 2
  %mul137 = fmul float %416, %417
  %418 = call float @llvm.fmuladd.f32(float %414, float %415, float %mul137)
  %419 = extractelement <4 x float> %call57, i32 2
  %420 = extractelement <4 x float> %call71, i32 2
  %421 = call float @llvm.fmuladd.f32(float %419, float %420, float %418)
  %422 = extractelement <4 x float> %call57, i32 3
  %423 = extractelement <4 x float> %call76, i32 2
  %424 = call float @llvm.fmuladd.f32(float %422, float %423, float %421)
  %425 = extractelement <4 x float> %413, i32 2
  %add138 = fadd float %425, %424
  %426 = insertelement <4 x float> %413, float %add138, i32 2
  %427 = extractelement <4 x float> %call57, i32 0
  %428 = extractelement <4 x float> %call61, i32 3
  %429 = extractelement <4 x float> %call57, i32 1
  %430 = extractelement <4 x float> %call66, i32 3
  %mul139 = fmul float %429, %430
  %431 = call float @llvm.fmuladd.f32(float %427, float %428, float %mul139)
  %432 = extractelement <4 x float> %call57, i32 2
  %433 = extractelement <4 x float> %call71, i32 3
  %434 = call float @llvm.fmuladd.f32(float %432, float %433, float %431)
  %435 = extractelement <4 x float> %call57, i32 3
  %436 = extractelement <4 x float> %call76, i32 3
  %437 = call float @llvm.fmuladd.f32(float %435, float %436, float %434)
  %438 = extractelement <4 x float> %426, i32 3
  %add140 = fadd float %438, %437
  %439 = insertelement <4 x float> %426, float %add140, i32 3
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %add141 = add nsw i32 %i.0, 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %440 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit143 = insertelement <2 x i32> undef, i32 %440, i32 0
  %441 = extractelement <2 x i32> %vecinit3, i32 1
  %mul = mul nsw i32 %441, 8
  %vecinit144 = insertelement <2 x i32> %vecinit143, i32 %mul, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit144, <4 x float> %sum0.0)
  %442 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit146 = insertelement <2 x i32> undef, i32 %442, i32 0
  %443 = extractelement <2 x i32> %vecinit3, i32 1
  %mul147 = mul nsw i32 %443, 8
  %add148 = add nsw i32 %mul147, 1
  %vecinit149 = insertelement <2 x i32> %vecinit146, i32 %add148, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit149, <4 x float> %sum1.0)
  %444 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit151 = insertelement <2 x i32> undef, i32 %444, i32 0
  %445 = extractelement <2 x i32> %vecinit3, i32 1
  %mul152 = mul nsw i32 %445, 8
  %add153 = add nsw i32 %mul152, 2
  %vecinit154 = insertelement <2 x i32> %vecinit151, i32 %add153, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit154, <4 x float> %sum2.0)
  %446 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit156 = insertelement <2 x i32> undef, i32 %446, i32 0
  %447 = extractelement <2 x i32> %vecinit3, i32 1
  %mul157 = mul nsw i32 %447, 8
  %add158 = add nsw i32 %mul157, 3
  %vecinit159 = insertelement <2 x i32> %vecinit156, i32 %add158, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit159, <4 x float> %sum3.0)
  %448 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit161 = insertelement <2 x i32> undef, i32 %448, i32 0
  %449 = extractelement <2 x i32> %vecinit3, i32 1
  %mul162 = mul nsw i32 %449, 8
  %add163 = add nsw i32 %mul162, 4
  %vecinit164 = insertelement <2 x i32> %vecinit161, i32 %add163, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit164, <4 x float> %sum4.0)
  %450 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit166 = insertelement <2 x i32> undef, i32 %450, i32 0
  %451 = extractelement <2 x i32> %vecinit3, i32 1
  %mul167 = mul nsw i32 %451, 8
  %add168 = add nsw i32 %mul167, 5
  %vecinit169 = insertelement <2 x i32> %vecinit166, i32 %add168, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit169, <4 x float> %sum5.0)
  %452 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit171 = insertelement <2 x i32> undef, i32 %452, i32 0
  %453 = extractelement <2 x i32> %vecinit3, i32 1
  %mul172 = mul nsw i32 %453, 8
  %add173 = add nsw i32 %mul172, 6
  %vecinit174 = insertelement <2 x i32> %vecinit171, i32 %add173, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit174, <4 x float> %sum6.0)
  %454 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit176 = insertelement <2 x i32> undef, i32 %454, i32 0
  %455 = extractelement <2 x i32> %vecinit3, i32 1
  %mul177 = mul nsw i32 %455, 8
  %add178 = add nsw i32 %mul177, 7
  %vecinit179 = insertelement <2 x i32> %vecinit176, i32 %add178, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit179, <4 x float> %sum7.0)
  ret void
}

; Function Attrs: nounwind
define cc75 <4 x float> @mat_mult_mini(<4 x float> %a, <4 x float> %b0, <4 x float> %b1, <4 x float> %b2, <4 x float> %b3, <4 x float> %c) #0 {
entry:
  %0 = extractelement <4 x float> %a, i32 0
  %1 = insertelement <4 x float> undef, float %0, i32 0
  %splat = shufflevector <4 x float> %1, <4 x float> %1, <4 x i32> zeroinitializer
  %call = call cc75 <4 x float> @_Z3madDv4_fS_S_(<4 x float> %splat, <4 x float> %b0, <4 x float> %c) #1
  %2 = extractelement <4 x float> %a, i32 1
  %3 = insertelement <4 x float> undef, float %2, i32 0
  %splat1 = shufflevector <4 x float> %3, <4 x float> %3, <4 x i32> zeroinitializer
  %call2 = call cc75 <4 x float> @_Z3madDv4_fS_S_(<4 x float> %splat1, <4 x float> %b1, <4 x float> %call) #1
  %4 = extractelement <4 x float> %a, i32 2
  %5 = insertelement <4 x float> undef, float %4, i32 0
  %splat3 = shufflevector <4 x float> %5, <4 x float> %5, <4 x i32> zeroinitializer
  %call4 = call cc75 <4 x float> @_Z3madDv4_fS_S_(<4 x float> %splat3, <4 x float> %b2, <4 x float> %call2) #1
  %6 = extractelement <4 x float> %a, i32 3
  %7 = insertelement <4 x float> undef, float %6, i32 0
  %splat5 = shufflevector <4 x float> %7, <4 x float> %7, <4 x i32> zeroinitializer
  %call6 = call cc75 <4 x float> @_Z3madDv4_fS_S_(<4 x float> %splat5, <4 x float> %b3, <4 x float> %call4) #1
  ret <4 x float> %call6
}

; Function Attrs: nounwind readnone
declare cc75 <4 x float> @_Z3madDv4_fS_S_(<4 x float>, <4 x float>, <4 x float>) #1

; Function Attrs: nounwind
define cc75 <4 x float> @mat_mult_pre(<4 x float> %a, <4 x float> %b0, <4 x float> %b1, <4 x float> %b2, <4 x float> %b3) #0 {
entry:
  %0 = extractelement <4 x float> %a, i32 0
  %1 = insertelement <4 x float> undef, float %0, i32 0
  %splat = shufflevector <4 x float> %1, <4 x float> %1, <4 x i32> zeroinitializer
  %mul = fmul <4 x float> %splat, %b0
  %2 = extractelement <4 x float> %a, i32 1
  %3 = insertelement <4 x float> undef, float %2, i32 0
  %splat1 = shufflevector <4 x float> %3, <4 x float> %3, <4 x i32> zeroinitializer
  %call = call cc75 <4 x float> @_Z3madDv4_fS_S_(<4 x float> %splat1, <4 x float> %b1, <4 x float> %mul) #1
  %4 = extractelement <4 x float> %a, i32 2
  %5 = insertelement <4 x float> undef, float %4, i32 0
  %splat2 = shufflevector <4 x float> %5, <4 x float> %5, <4 x i32> zeroinitializer
  %call3 = call cc75 <4 x float> @_Z3madDv4_fS_S_(<4 x float> %splat2, <4 x float> %b2, <4 x float> %call) #1
  %6 = extractelement <4 x float> %a, i32 3
  %7 = insertelement <4 x float> undef, float %6, i32 0
  %splat4 = shufflevector <4 x float> %7, <4 x float> %7, <4 x i32> zeroinitializer
  %call5 = call cc75 <4 x float> @_Z3madDv4_fS_S_(<4 x float> %splat4, <4 x float> %b3, <4 x float> %call3) #1
  ret <4 x float> %call5
}

; Function Attrs: nounwind
define cc76 void @__OpenCL_mmmKernel3_kernel(%opencl.image2d_t addrspace(1)* %matrixA, %opencl.image2d_t addrspace(1)* %matrixB, %opencl.image2d_t addrspace(1)* %matrixC, i32 %widthA, i32 %widthB) #0 {
entry:
  %call = call cc75 i64 @_Z13get_global_idj(i32 0) #1
  %conv = trunc i64 %call to i32
  %vecinit = insertelement <2 x i32> undef, i32 %conv, i32 0
  %call1 = call cc75 i64 @_Z13get_global_idj(i32 1) #1
  %conv2 = trunc i64 %call1 to i32
  %vecinit3 = insertelement <2 x i32> %vecinit, i32 %conv2, i32 1
  %shr = lshr i32 %widthB, 2
  %0 = extractelement <2 x i32> %vecinit3, i32 0
  %1 = extractelement <2 x i32> %vecinit3, i32 1
  %shl = shl i32 %1, 3
  %2 = insertelement <8 x i32> undef, i32 %shl, i32 0
  %splat = shufflevector <8 x i32> %2, <8 x i32> %2, <8 x i32> zeroinitializer
  %add = add <8 x i32> %splat, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3 = load i32 addrspace(2)* @imageSampler, align 4
  %4 = extractelement <8 x i32> %add, i32 0
  %vecinit7 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %4, i32 1
  %call8 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %3, <2 x i32> %vecinit7) #1
  %5 = load i32 addrspace(2)* @imageSampler, align 4
  %6 = extractelement <8 x i32> %add, i32 1
  %vecinit10 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %6, i32 1
  %call11 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %5, <2 x i32> %vecinit10) #1
  %7 = load i32 addrspace(2)* @imageSampler, align 4
  %8 = extractelement <8 x i32> %add, i32 2
  %vecinit13 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %8, i32 1
  %call14 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %7, <2 x i32> %vecinit13) #1
  %9 = load i32 addrspace(2)* @imageSampler, align 4
  %10 = extractelement <8 x i32> %add, i32 3
  %vecinit16 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %10, i32 1
  %call17 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %9, <2 x i32> %vecinit16) #1
  %11 = load i32 addrspace(2)* @imageSampler, align 4
  %12 = extractelement <8 x i32> %add, i32 4
  %vecinit19 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %12, i32 1
  %call20 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %11, <2 x i32> %vecinit19) #1
  %13 = load i32 addrspace(2)* @imageSampler, align 4
  %14 = extractelement <8 x i32> %add, i32 5
  %vecinit22 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %14, i32 1
  %call23 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %13, <2 x i32> %vecinit22) #1
  %15 = load i32 addrspace(2)* @imageSampler, align 4
  %16 = extractelement <8 x i32> %add, i32 6
  %vecinit25 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %16, i32 1
  %call26 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %15, <2 x i32> %vecinit25) #1
  %17 = load i32 addrspace(2)* @imageSampler, align 4
  %18 = extractelement <8 x i32> %add, i32 7
  %vecinit28 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %18, i32 1
  %call29 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %17, <2 x i32> %vecinit28) #1
  %19 = load i32 addrspace(2)* @imageSampler, align 4
  %20 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit31 = insertelement <2 x i32> undef, i32 %20, i32 0
  %vecinit32 = insertelement <2 x i32> %vecinit31, i32 0, i32 1
  %call33 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %19, <2 x i32> %vecinit32) #1
  %21 = load i32 addrspace(2)* @imageSampler, align 4
  %22 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit35 = insertelement <2 x i32> undef, i32 %22, i32 0
  %vecinit36 = insertelement <2 x i32> %vecinit35, i32 1, i32 1
  %call37 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %21, <2 x i32> %vecinit36) #1
  %23 = load i32 addrspace(2)* @imageSampler, align 4
  %24 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit39 = insertelement <2 x i32> undef, i32 %24, i32 0
  %vecinit40 = insertelement <2 x i32> %vecinit39, i32 2, i32 1
  %call41 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %23, <2 x i32> %vecinit40) #1
  %25 = load i32 addrspace(2)* @imageSampler, align 4
  %26 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit43 = insertelement <2 x i32> undef, i32 %26, i32 0
  %vecinit44 = insertelement <2 x i32> %vecinit43, i32 3, i32 1
  %call45 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %25, <2 x i32> %vecinit44) #1
  %call46 = call cc75 <4 x float> @mat_mult_pre(<4 x float> %call8, <4 x float> %call33, <4 x float> %call37, <4 x float> %call41, <4 x float> %call45)
  %call47 = call cc75 <4 x float> @mat_mult_pre(<4 x float> %call11, <4 x float> %call33, <4 x float> %call37, <4 x float> %call41, <4 x float> %call45)
  %call48 = call cc75 <4 x float> @mat_mult_pre(<4 x float> %call14, <4 x float> %call33, <4 x float> %call37, <4 x float> %call41, <4 x float> %call45)
  %call49 = call cc75 <4 x float> @mat_mult_pre(<4 x float> %call17, <4 x float> %call33, <4 x float> %call37, <4 x float> %call41, <4 x float> %call45)
  %call50 = call cc75 <4 x float> @mat_mult_pre(<4 x float> %call20, <4 x float> %call33, <4 x float> %call37, <4 x float> %call41, <4 x float> %call45)
  %call51 = call cc75 <4 x float> @mat_mult_pre(<4 x float> %call23, <4 x float> %call33, <4 x float> %call37, <4 x float> %call41, <4 x float> %call45)
  %call52 = call cc75 <4 x float> @mat_mult_pre(<4 x float> %call26, <4 x float> %call33, <4 x float> %call37, <4 x float> %call41, <4 x float> %call45)
  %call53 = call cc75 <4 x float> @mat_mult_pre(<4 x float> %call29, <4 x float> %call33, <4 x float> %call37, <4 x float> %call41, <4 x float> %call45)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %sum7.0 = phi <4 x float> [ %call53, %entry ], [ %call115, %for.inc ]
  %sum6.0 = phi <4 x float> [ %call52, %entry ], [ %call114, %for.inc ]
  %sum5.0 = phi <4 x float> [ %call51, %entry ], [ %call113, %for.inc ]
  %sum4.0 = phi <4 x float> [ %call50, %entry ], [ %call112, %for.inc ]
  %sum3.0 = phi <4 x float> [ %call49, %entry ], [ %call111, %for.inc ]
  %sum2.0 = phi <4 x float> [ %call48, %entry ], [ %call110, %for.inc ]
  %sum1.0 = phi <4 x float> [ %call47, %entry ], [ %call109, %for.inc ]
  %sum0.0 = phi <4 x float> [ %call46, %entry ], [ %call108, %for.inc ]
  %i.0 = phi i32 [ 4, %entry ], [ %add116, %for.inc ]
  %cmp = icmp ult i32 %i.0, %widthA
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %shr56 = ashr i32 %i.0, 2
  %27 = insertelement <4 x i32> undef, i32 %i.0, i32 0
  %splat58 = shufflevector <4 x i32> %27, <4 x i32> %27, <4 x i32> zeroinitializer
  %add59 = add <4 x i32> %splat58, <i32 0, i32 1, i32 2, i32 3>
  %28 = load i32 addrspace(2)* @imageSampler, align 4
  %vecinit61 = insertelement <2 x i32> undef, i32 %shr56, i32 0
  %29 = extractelement <8 x i32> %add, i32 0
  %vecinit62 = insertelement <2 x i32> %vecinit61, i32 %29, i32 1
  %call63 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %28, <2 x i32> %vecinit62) #1
  %30 = load i32 addrspace(2)* @imageSampler, align 4
  %vecinit65 = insertelement <2 x i32> undef, i32 %shr56, i32 0
  %31 = extractelement <8 x i32> %add, i32 1
  %vecinit66 = insertelement <2 x i32> %vecinit65, i32 %31, i32 1
  %call67 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %30, <2 x i32> %vecinit66) #1
  %32 = load i32 addrspace(2)* @imageSampler, align 4
  %vecinit69 = insertelement <2 x i32> undef, i32 %shr56, i32 0
  %33 = extractelement <8 x i32> %add, i32 2
  %vecinit70 = insertelement <2 x i32> %vecinit69, i32 %33, i32 1
  %call71 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %32, <2 x i32> %vecinit70) #1
  %34 = load i32 addrspace(2)* @imageSampler, align 4
  %vecinit73 = insertelement <2 x i32> undef, i32 %shr56, i32 0
  %35 = extractelement <8 x i32> %add, i32 3
  %vecinit74 = insertelement <2 x i32> %vecinit73, i32 %35, i32 1
  %call75 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %34, <2 x i32> %vecinit74) #1
  %36 = load i32 addrspace(2)* @imageSampler, align 4
  %37 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit77 = insertelement <2 x i32> undef, i32 %37, i32 0
  %38 = extractelement <4 x i32> %add59, i32 0
  %vecinit78 = insertelement <2 x i32> %vecinit77, i32 %38, i32 1
  %call79 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %36, <2 x i32> %vecinit78) #1
  %39 = load i32 addrspace(2)* @imageSampler, align 4
  %40 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit81 = insertelement <2 x i32> undef, i32 %40, i32 0
  %41 = extractelement <4 x i32> %add59, i32 1
  %vecinit82 = insertelement <2 x i32> %vecinit81, i32 %41, i32 1
  %call83 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %39, <2 x i32> %vecinit82) #1
  %42 = load i32 addrspace(2)* @imageSampler, align 4
  %43 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit85 = insertelement <2 x i32> undef, i32 %43, i32 0
  %44 = extractelement <4 x i32> %add59, i32 2
  %vecinit86 = insertelement <2 x i32> %vecinit85, i32 %44, i32 1
  %call87 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %42, <2 x i32> %vecinit86) #1
  %45 = load i32 addrspace(2)* @imageSampler, align 4
  %46 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit89 = insertelement <2 x i32> undef, i32 %46, i32 0
  %47 = extractelement <4 x i32> %add59, i32 3
  %vecinit90 = insertelement <2 x i32> %vecinit89, i32 %47, i32 1
  %call91 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixB, i32 %45, <2 x i32> %vecinit90) #1
  %48 = load i32 addrspace(2)* @imageSampler, align 4
  %vecinit93 = insertelement <2 x i32> undef, i32 %shr56, i32 0
  %49 = extractelement <8 x i32> %add, i32 4
  %vecinit94 = insertelement <2 x i32> %vecinit93, i32 %49, i32 1
  %call95 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %48, <2 x i32> %vecinit94) #1
  %50 = load i32 addrspace(2)* @imageSampler, align 4
  %vecinit97 = insertelement <2 x i32> undef, i32 %shr56, i32 0
  %51 = extractelement <8 x i32> %add, i32 5
  %vecinit98 = insertelement <2 x i32> %vecinit97, i32 %51, i32 1
  %call99 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %50, <2 x i32> %vecinit98) #1
  %52 = load i32 addrspace(2)* @imageSampler, align 4
  %vecinit101 = insertelement <2 x i32> undef, i32 %shr56, i32 0
  %53 = extractelement <8 x i32> %add, i32 6
  %vecinit102 = insertelement <2 x i32> %vecinit101, i32 %53, i32 1
  %call103 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %52, <2 x i32> %vecinit102) #1
  %54 = load i32 addrspace(2)* @imageSampler, align 4
  %vecinit105 = insertelement <2 x i32> undef, i32 %shr56, i32 0
  %55 = extractelement <8 x i32> %add, i32 7
  %vecinit106 = insertelement <2 x i32> %vecinit105, i32 %55, i32 1
  %call107 = call cc75 <4 x float> @_Z11read_imagef11ocl_image2d11ocl_samplerDv2_i(%opencl.image2d_t addrspace(1)* %matrixA, i32 %54, <2 x i32> %vecinit106) #1
  %call108 = call cc75 <4 x float> @mat_mult_mini(<4 x float> %call63, <4 x float> %call79, <4 x float> %call83, <4 x float> %call87, <4 x float> %call91, <4 x float> %sum0.0)
  %call109 = call cc75 <4 x float> @mat_mult_mini(<4 x float> %call67, <4 x float> %call79, <4 x float> %call83, <4 x float> %call87, <4 x float> %call91, <4 x float> %sum1.0)
  %call110 = call cc75 <4 x float> @mat_mult_mini(<4 x float> %call71, <4 x float> %call79, <4 x float> %call83, <4 x float> %call87, <4 x float> %call91, <4 x float> %sum2.0)
  %call111 = call cc75 <4 x float> @mat_mult_mini(<4 x float> %call75, <4 x float> %call79, <4 x float> %call83, <4 x float> %call87, <4 x float> %call91, <4 x float> %sum3.0)
  %call112 = call cc75 <4 x float> @mat_mult_mini(<4 x float> %call95, <4 x float> %call79, <4 x float> %call83, <4 x float> %call87, <4 x float> %call91, <4 x float> %sum4.0)
  %call113 = call cc75 <4 x float> @mat_mult_mini(<4 x float> %call99, <4 x float> %call79, <4 x float> %call83, <4 x float> %call87, <4 x float> %call91, <4 x float> %sum5.0)
  %call114 = call cc75 <4 x float> @mat_mult_mini(<4 x float> %call103, <4 x float> %call79, <4 x float> %call83, <4 x float> %call87, <4 x float> %call91, <4 x float> %sum6.0)
  %call115 = call cc75 <4 x float> @mat_mult_mini(<4 x float> %call107, <4 x float> %call79, <4 x float> %call83, <4 x float> %call87, <4 x float> %call91, <4 x float> %sum7.0)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %add116 = add nsw i32 %i.0, 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %56 = extractelement <2 x i32> %vecinit3, i32 1
  %mul = mul nsw i32 %56, 8
  %57 = insertelement <8 x i32> undef, i32 %mul, i32 0
  %splat117 = shufflevector <8 x i32> %57, <8 x i32> %57, <8 x i32> zeroinitializer
  %add118 = add <8 x i32> %splat117, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %58 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit120 = insertelement <2 x i32> undef, i32 %58, i32 0
  %59 = extractelement <8 x i32> %add118, i32 0
  %vecinit121 = insertelement <2 x i32> %vecinit120, i32 %59, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit121, <4 x float> %sum0.0)
  %60 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit123 = insertelement <2 x i32> undef, i32 %60, i32 0
  %61 = extractelement <8 x i32> %add118, i32 1
  %vecinit124 = insertelement <2 x i32> %vecinit123, i32 %61, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit124, <4 x float> %sum1.0)
  %62 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit126 = insertelement <2 x i32> undef, i32 %62, i32 0
  %63 = extractelement <8 x i32> %add118, i32 2
  %vecinit127 = insertelement <2 x i32> %vecinit126, i32 %63, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit127, <4 x float> %sum2.0)
  %64 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit129 = insertelement <2 x i32> undef, i32 %64, i32 0
  %65 = extractelement <8 x i32> %add118, i32 3
  %vecinit130 = insertelement <2 x i32> %vecinit129, i32 %65, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit130, <4 x float> %sum3.0)
  %66 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit132 = insertelement <2 x i32> undef, i32 %66, i32 0
  %67 = extractelement <8 x i32> %add118, i32 4
  %vecinit133 = insertelement <2 x i32> %vecinit132, i32 %67, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit133, <4 x float> %sum4.0)
  %68 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit135 = insertelement <2 x i32> undef, i32 %68, i32 0
  %69 = extractelement <8 x i32> %add118, i32 5
  %vecinit136 = insertelement <2 x i32> %vecinit135, i32 %69, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit136, <4 x float> %sum5.0)
  %70 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit138 = insertelement <2 x i32> undef, i32 %70, i32 0
  %71 = extractelement <8 x i32> %add118, i32 6
  %vecinit139 = insertelement <2 x i32> %vecinit138, i32 %71, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit139, <4 x float> %sum6.0)
  %72 = extractelement <2 x i32> %vecinit3, i32 0
  %vecinit141 = insertelement <2 x i32> undef, i32 %72, i32 0
  %73 = extractelement <8 x i32> %add118, i32 7
  %vecinit142 = insertelement <2 x i32> %vecinit141, i32 %73, i32 1
  call cc75 void @_Z12write_imagef11ocl_image2dDv2_iDv4_f(%opencl.image2d_t addrspace(1)* %matrixC, <2 x i32> %vecinit142, <4 x float> %sum7.0)
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }

!opencl.kernels = !{!0, !6, !7}
!opencl.enable.FP_CONTRACT = !{}
!opencl.ocl.version = !{!8}
!opencl.spir.version = !{!8}

!0 = metadata !{void (%opencl.image2d_t addrspace(1)*, %opencl.image2d_t addrspace(1)*, %opencl.image2d_t addrspace(1)*, i32, i32)* @__OpenCL_mmmKernel_kernel, metadata !1, metadata !2, metadata !3, metadata !4, metadata !5}
!1 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 1, i32 1, i32 0, i32 0}
!2 = metadata !{metadata !"kernel_arg_access_qual", metadata !"read_only", metadata !"read_only", metadata !"write_only", metadata !"none", metadata !"none"}
!3 = metadata !{metadata !"kernel_arg_type", metadata !"image2d_t", metadata !"image2d_t", metadata !"image2d_t", metadata !"uint", metadata !"uint"}
!4 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !"", metadata !"", metadata !"", metadata !""}
!5 = metadata !{metadata !"kernel_arg_base_type", metadata !"image2d_t", metadata !"image2d_t", metadata !"image2d_t", metadata !"uint", metadata !"uint"}
!6 = metadata !{void (%opencl.image2d_t addrspace(1)*, %opencl.image2d_t addrspace(1)*, %opencl.image2d_t addrspace(1)*, i32, i32)* @__OpenCL_mmmKernel2_kernel, metadata !1, metadata !2, metadata !3, metadata !4, metadata !5}
!7 = metadata !{void (%opencl.image2d_t addrspace(1)*, %opencl.image2d_t addrspace(1)*, %opencl.image2d_t addrspace(1)*, i32, i32)* @__OpenCL_mmmKernel3_kernel, metadata !1, metadata !2, metadata !3, metadata !4, metadata !5}
!8 = metadata !{i32 1, i32 2}
