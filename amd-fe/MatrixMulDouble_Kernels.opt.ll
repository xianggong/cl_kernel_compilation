; ModuleID = 'MatrixMulDouble_Kernels.opt.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v16:16:16-v24:32:32-v32:32:32-v48:64:64-v64:64:64-v96:128:128-v128:128:128-v192:256:256-v256:256:256-v512:512:512-v1024:1024:1024"
target triple = "spir64-unknown-unknown"

; Function Attrs: nounwind
define cc76 void @__OpenCL_mmmKernel_kernel(<4 x double> addrspace(1)* %matrixA, <4 x double> addrspace(1)* %matrixB, <4 x double> addrspace(1)* %matrixC, i32 %widthA, i32 %widthB) #0 {
entry:
  %call = call cc75 i64 @_Z13get_global_idj(i32 0) #1
  %conv = trunc i64 %call to i32
  %vecinit = insertelement <2 x i32> undef, i32 %conv, i32 0
  %call1 = call cc75 i64 @_Z13get_global_idj(i32 1) #1
  %conv2 = trunc i64 %call1 to i32
  %vecinit3 = insertelement <2 x i32> %vecinit, i32 %conv2, i32 1
  %div = udiv i32 %widthB, 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %sum0.0 = phi <4 x double> [ zeroinitializer, %entry ], [ %67, %for.inc ]
  %sum1.0 = phi <4 x double> [ zeroinitializer, %entry ], [ %119, %for.inc ]
  %sum2.0 = phi <4 x double> [ zeroinitializer, %entry ], [ %171, %for.inc ]
  %sum3.0 = phi <4 x double> [ zeroinitializer, %entry ], [ %223, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %add130, %for.inc ]
  %cmp = icmp ult i32 %i.0, %widthA
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %div5 = sdiv i32 %i.0, 4
  %0 = extractelement <2 x i32> %vecinit3, i32 1
  %shl = shl i32 %0, 2
  %div6 = udiv i32 %widthA, 4
  %mul = mul i32 %shl, %div6
  %add = add i32 %div5, %mul
  %idxprom = zext i32 %add to i64
  %arrayidx = getelementptr inbounds <4 x double> addrspace(1)* %matrixA, i64 %idxprom
  %1 = load <4 x double> addrspace(1)* %arrayidx, align 32
  %div7 = sdiv i32 %i.0, 4
  %2 = extractelement <2 x i32> %vecinit3, i32 1
  %shl8 = shl i32 %2, 2
  %add9 = add nsw i32 %shl8, 1
  %div10 = udiv i32 %widthA, 4
  %mul11 = mul i32 %add9, %div10
  %add12 = add i32 %div7, %mul11
  %idxprom13 = zext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds <4 x double> addrspace(1)* %matrixA, i64 %idxprom13
  %3 = load <4 x double> addrspace(1)* %arrayidx14, align 32
  %div15 = sdiv i32 %i.0, 4
  %4 = extractelement <2 x i32> %vecinit3, i32 1
  %shl16 = shl i32 %4, 2
  %add17 = add nsw i32 %shl16, 2
  %div18 = udiv i32 %widthA, 4
  %mul19 = mul i32 %add17, %div18
  %add20 = add i32 %div15, %mul19
  %idxprom21 = zext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds <4 x double> addrspace(1)* %matrixA, i64 %idxprom21
  %5 = load <4 x double> addrspace(1)* %arrayidx22, align 32
  %div23 = sdiv i32 %i.0, 4
  %6 = extractelement <2 x i32> %vecinit3, i32 1
  %shl24 = shl i32 %6, 2
  %add25 = add nsw i32 %shl24, 3
  %div26 = udiv i32 %widthA, 4
  %mul27 = mul i32 %add25, %div26
  %add28 = add i32 %div23, %mul27
  %idxprom29 = zext i32 %add28 to i64
  %arrayidx30 = getelementptr inbounds <4 x double> addrspace(1)* %matrixA, i64 %idxprom29
  %7 = load <4 x double> addrspace(1)* %arrayidx30, align 32
  %8 = extractelement <2 x i32> %vecinit3, i32 0
  %mul31 = mul i32 %i.0, %div
  %add32 = add i32 %8, %mul31
  %idxprom33 = zext i32 %add32 to i64
  %arrayidx34 = getelementptr inbounds <4 x double> addrspace(1)* %matrixB, i64 %idxprom33
  %9 = load <4 x double> addrspace(1)* %arrayidx34, align 32
  %10 = extractelement <2 x i32> %vecinit3, i32 0
  %add35 = add nsw i32 %i.0, 1
  %mul36 = mul i32 %add35, %div
  %add37 = add i32 %10, %mul36
  %idxprom38 = zext i32 %add37 to i64
  %arrayidx39 = getelementptr inbounds <4 x double> addrspace(1)* %matrixB, i64 %idxprom38
  %11 = load <4 x double> addrspace(1)* %arrayidx39, align 32
  %12 = extractelement <2 x i32> %vecinit3, i32 0
  %add40 = add nsw i32 %i.0, 2
  %mul41 = mul i32 %add40, %div
  %add42 = add i32 %12, %mul41
  %idxprom43 = zext i32 %add42 to i64
  %arrayidx44 = getelementptr inbounds <4 x double> addrspace(1)* %matrixB, i64 %idxprom43
  %13 = load <4 x double> addrspace(1)* %arrayidx44, align 32
  %14 = extractelement <2 x i32> %vecinit3, i32 0
  %add45 = add nsw i32 %i.0, 3
  %mul46 = mul i32 %add45, %div
  %add47 = add i32 %14, %mul46
  %idxprom48 = zext i32 %add47 to i64
  %arrayidx49 = getelementptr inbounds <4 x double> addrspace(1)* %matrixB, i64 %idxprom48
  %15 = load <4 x double> addrspace(1)* %arrayidx49, align 32
  %16 = extractelement <4 x double> %1, i32 0
  %17 = extractelement <4 x double> %9, i32 0
  %18 = extractelement <4 x double> %1, i32 1
  %19 = extractelement <4 x double> %11, i32 0
  %mul51 = fmul double %18, %19
  %20 = call double @llvm.fmuladd.f64(double %16, double %17, double %mul51)
  %21 = extractelement <4 x double> %1, i32 2
  %22 = extractelement <4 x double> %13, i32 0
  %23 = call double @llvm.fmuladd.f64(double %21, double %22, double %20)
  %24 = extractelement <4 x double> %1, i32 3
  %25 = extractelement <4 x double> %15, i32 0
  %26 = call double @llvm.fmuladd.f64(double %24, double %25, double %23)
  %27 = extractelement <4 x double> %sum0.0, i32 0
  %add54 = fadd double %27, %26
  %28 = insertelement <4 x double> %sum0.0, double %add54, i32 0
  %29 = extractelement <4 x double> %1, i32 0
  %30 = extractelement <4 x double> %9, i32 1
  %31 = extractelement <4 x double> %1, i32 1
  %32 = extractelement <4 x double> %11, i32 1
  %mul56 = fmul double %31, %32
  %33 = call double @llvm.fmuladd.f64(double %29, double %30, double %mul56)
  %34 = extractelement <4 x double> %1, i32 2
  %35 = extractelement <4 x double> %13, i32 1
  %36 = call double @llvm.fmuladd.f64(double %34, double %35, double %33)
  %37 = extractelement <4 x double> %1, i32 3
  %38 = extractelement <4 x double> %15, i32 1
  %39 = call double @llvm.fmuladd.f64(double %37, double %38, double %36)
  %40 = extractelement <4 x double> %28, i32 1
  %add59 = fadd double %40, %39
  %41 = insertelement <4 x double> %28, double %add59, i32 1
  %42 = extractelement <4 x double> %1, i32 0
  %43 = extractelement <4 x double> %9, i32 2
  %44 = extractelement <4 x double> %1, i32 1
  %45 = extractelement <4 x double> %11, i32 2
  %mul61 = fmul double %44, %45
  %46 = call double @llvm.fmuladd.f64(double %42, double %43, double %mul61)
  %47 = extractelement <4 x double> %1, i32 2
  %48 = extractelement <4 x double> %13, i32 2
  %49 = call double @llvm.fmuladd.f64(double %47, double %48, double %46)
  %50 = extractelement <4 x double> %1, i32 3
  %51 = extractelement <4 x double> %15, i32 2
  %52 = call double @llvm.fmuladd.f64(double %50, double %51, double %49)
  %53 = extractelement <4 x double> %41, i32 2
  %add64 = fadd double %53, %52
  %54 = insertelement <4 x double> %41, double %add64, i32 2
  %55 = extractelement <4 x double> %1, i32 0
  %56 = extractelement <4 x double> %9, i32 3
  %57 = extractelement <4 x double> %1, i32 1
  %58 = extractelement <4 x double> %11, i32 3
  %mul66 = fmul double %57, %58
  %59 = call double @llvm.fmuladd.f64(double %55, double %56, double %mul66)
  %60 = extractelement <4 x double> %1, i32 2
  %61 = extractelement <4 x double> %13, i32 3
  %62 = call double @llvm.fmuladd.f64(double %60, double %61, double %59)
  %63 = extractelement <4 x double> %1, i32 3
  %64 = extractelement <4 x double> %15, i32 3
  %65 = call double @llvm.fmuladd.f64(double %63, double %64, double %62)
  %66 = extractelement <4 x double> %54, i32 3
  %add69 = fadd double %66, %65
  %67 = insertelement <4 x double> %54, double %add69, i32 3
  %68 = extractelement <4 x double> %3, i32 0
  %69 = extractelement <4 x double> %9, i32 0
  %70 = extractelement <4 x double> %3, i32 1
  %71 = extractelement <4 x double> %11, i32 0
  %mul71 = fmul double %70, %71
  %72 = call double @llvm.fmuladd.f64(double %68, double %69, double %mul71)
  %73 = extractelement <4 x double> %3, i32 2
  %74 = extractelement <4 x double> %13, i32 0
  %75 = call double @llvm.fmuladd.f64(double %73, double %74, double %72)
  %76 = extractelement <4 x double> %3, i32 3
  %77 = extractelement <4 x double> %15, i32 0
  %78 = call double @llvm.fmuladd.f64(double %76, double %77, double %75)
  %79 = extractelement <4 x double> %sum1.0, i32 0
  %add74 = fadd double %79, %78
  %80 = insertelement <4 x double> %sum1.0, double %add74, i32 0
  %81 = extractelement <4 x double> %3, i32 0
  %82 = extractelement <4 x double> %9, i32 1
  %83 = extractelement <4 x double> %3, i32 1
  %84 = extractelement <4 x double> %11, i32 1
  %mul76 = fmul double %83, %84
  %85 = call double @llvm.fmuladd.f64(double %81, double %82, double %mul76)
  %86 = extractelement <4 x double> %3, i32 2
  %87 = extractelement <4 x double> %13, i32 1
  %88 = call double @llvm.fmuladd.f64(double %86, double %87, double %85)
  %89 = extractelement <4 x double> %3, i32 3
  %90 = extractelement <4 x double> %15, i32 1
  %91 = call double @llvm.fmuladd.f64(double %89, double %90, double %88)
  %92 = extractelement <4 x double> %80, i32 1
  %add79 = fadd double %92, %91
  %93 = insertelement <4 x double> %80, double %add79, i32 1
  %94 = extractelement <4 x double> %3, i32 0
  %95 = extractelement <4 x double> %9, i32 2
  %96 = extractelement <4 x double> %3, i32 1
  %97 = extractelement <4 x double> %11, i32 2
  %mul81 = fmul double %96, %97
  %98 = call double @llvm.fmuladd.f64(double %94, double %95, double %mul81)
  %99 = extractelement <4 x double> %3, i32 2
  %100 = extractelement <4 x double> %13, i32 2
  %101 = call double @llvm.fmuladd.f64(double %99, double %100, double %98)
  %102 = extractelement <4 x double> %3, i32 3
  %103 = extractelement <4 x double> %15, i32 2
  %104 = call double @llvm.fmuladd.f64(double %102, double %103, double %101)
  %105 = extractelement <4 x double> %93, i32 2
  %add84 = fadd double %105, %104
  %106 = insertelement <4 x double> %93, double %add84, i32 2
  %107 = extractelement <4 x double> %3, i32 0
  %108 = extractelement <4 x double> %9, i32 3
  %109 = extractelement <4 x double> %3, i32 1
  %110 = extractelement <4 x double> %11, i32 3
  %mul86 = fmul double %109, %110
  %111 = call double @llvm.fmuladd.f64(double %107, double %108, double %mul86)
  %112 = extractelement <4 x double> %3, i32 2
  %113 = extractelement <4 x double> %13, i32 3
  %114 = call double @llvm.fmuladd.f64(double %112, double %113, double %111)
  %115 = extractelement <4 x double> %3, i32 3
  %116 = extractelement <4 x double> %15, i32 3
  %117 = call double @llvm.fmuladd.f64(double %115, double %116, double %114)
  %118 = extractelement <4 x double> %106, i32 3
  %add89 = fadd double %118, %117
  %119 = insertelement <4 x double> %106, double %add89, i32 3
  %120 = extractelement <4 x double> %5, i32 0
  %121 = extractelement <4 x double> %9, i32 0
  %122 = extractelement <4 x double> %5, i32 1
  %123 = extractelement <4 x double> %11, i32 0
  %mul91 = fmul double %122, %123
  %124 = call double @llvm.fmuladd.f64(double %120, double %121, double %mul91)
  %125 = extractelement <4 x double> %5, i32 2
  %126 = extractelement <4 x double> %13, i32 0
  %127 = call double @llvm.fmuladd.f64(double %125, double %126, double %124)
  %128 = extractelement <4 x double> %5, i32 3
  %129 = extractelement <4 x double> %15, i32 0
  %130 = call double @llvm.fmuladd.f64(double %128, double %129, double %127)
  %131 = extractelement <4 x double> %sum2.0, i32 0
  %add94 = fadd double %131, %130
  %132 = insertelement <4 x double> %sum2.0, double %add94, i32 0
  %133 = extractelement <4 x double> %5, i32 0
  %134 = extractelement <4 x double> %9, i32 1
  %135 = extractelement <4 x double> %5, i32 1
  %136 = extractelement <4 x double> %11, i32 1
  %mul96 = fmul double %135, %136
  %137 = call double @llvm.fmuladd.f64(double %133, double %134, double %mul96)
  %138 = extractelement <4 x double> %5, i32 2
  %139 = extractelement <4 x double> %13, i32 1
  %140 = call double @llvm.fmuladd.f64(double %138, double %139, double %137)
  %141 = extractelement <4 x double> %5, i32 3
  %142 = extractelement <4 x double> %15, i32 1
  %143 = call double @llvm.fmuladd.f64(double %141, double %142, double %140)
  %144 = extractelement <4 x double> %132, i32 1
  %add99 = fadd double %144, %143
  %145 = insertelement <4 x double> %132, double %add99, i32 1
  %146 = extractelement <4 x double> %5, i32 0
  %147 = extractelement <4 x double> %9, i32 2
  %148 = extractelement <4 x double> %5, i32 1
  %149 = extractelement <4 x double> %11, i32 2
  %mul101 = fmul double %148, %149
  %150 = call double @llvm.fmuladd.f64(double %146, double %147, double %mul101)
  %151 = extractelement <4 x double> %5, i32 2
  %152 = extractelement <4 x double> %13, i32 2
  %153 = call double @llvm.fmuladd.f64(double %151, double %152, double %150)
  %154 = extractelement <4 x double> %5, i32 3
  %155 = extractelement <4 x double> %15, i32 2
  %156 = call double @llvm.fmuladd.f64(double %154, double %155, double %153)
  %157 = extractelement <4 x double> %145, i32 2
  %add104 = fadd double %157, %156
  %158 = insertelement <4 x double> %145, double %add104, i32 2
  %159 = extractelement <4 x double> %5, i32 0
  %160 = extractelement <4 x double> %9, i32 3
  %161 = extractelement <4 x double> %5, i32 1
  %162 = extractelement <4 x double> %11, i32 3
  %mul106 = fmul double %161, %162
  %163 = call double @llvm.fmuladd.f64(double %159, double %160, double %mul106)
  %164 = extractelement <4 x double> %5, i32 2
  %165 = extractelement <4 x double> %13, i32 3
  %166 = call double @llvm.fmuladd.f64(double %164, double %165, double %163)
  %167 = extractelement <4 x double> %5, i32 3
  %168 = extractelement <4 x double> %15, i32 3
  %169 = call double @llvm.fmuladd.f64(double %167, double %168, double %166)
  %170 = extractelement <4 x double> %158, i32 3
  %add109 = fadd double %170, %169
  %171 = insertelement <4 x double> %158, double %add109, i32 3
  %172 = extractelement <4 x double> %7, i32 0
  %173 = extractelement <4 x double> %9, i32 0
  %174 = extractelement <4 x double> %7, i32 1
  %175 = extractelement <4 x double> %11, i32 0
  %mul111 = fmul double %174, %175
  %176 = call double @llvm.fmuladd.f64(double %172, double %173, double %mul111)
  %177 = extractelement <4 x double> %7, i32 2
  %178 = extractelement <4 x double> %13, i32 0
  %179 = call double @llvm.fmuladd.f64(double %177, double %178, double %176)
  %180 = extractelement <4 x double> %7, i32 3
  %181 = extractelement <4 x double> %15, i32 0
  %182 = call double @llvm.fmuladd.f64(double %180, double %181, double %179)
  %183 = extractelement <4 x double> %sum3.0, i32 0
  %add114 = fadd double %183, %182
  %184 = insertelement <4 x double> %sum3.0, double %add114, i32 0
  %185 = extractelement <4 x double> %7, i32 0
  %186 = extractelement <4 x double> %9, i32 1
  %187 = extractelement <4 x double> %7, i32 1
  %188 = extractelement <4 x double> %11, i32 1
  %mul116 = fmul double %187, %188
  %189 = call double @llvm.fmuladd.f64(double %185, double %186, double %mul116)
  %190 = extractelement <4 x double> %7, i32 2
  %191 = extractelement <4 x double> %13, i32 1
  %192 = call double @llvm.fmuladd.f64(double %190, double %191, double %189)
  %193 = extractelement <4 x double> %7, i32 3
  %194 = extractelement <4 x double> %15, i32 1
  %195 = call double @llvm.fmuladd.f64(double %193, double %194, double %192)
  %196 = extractelement <4 x double> %184, i32 1
  %add119 = fadd double %196, %195
  %197 = insertelement <4 x double> %184, double %add119, i32 1
  %198 = extractelement <4 x double> %7, i32 0
  %199 = extractelement <4 x double> %9, i32 2
  %200 = extractelement <4 x double> %7, i32 1
  %201 = extractelement <4 x double> %11, i32 2
  %mul121 = fmul double %200, %201
  %202 = call double @llvm.fmuladd.f64(double %198, double %199, double %mul121)
  %203 = extractelement <4 x double> %7, i32 2
  %204 = extractelement <4 x double> %13, i32 2
  %205 = call double @llvm.fmuladd.f64(double %203, double %204, double %202)
  %206 = extractelement <4 x double> %7, i32 3
  %207 = extractelement <4 x double> %15, i32 2
  %208 = call double @llvm.fmuladd.f64(double %206, double %207, double %205)
  %209 = extractelement <4 x double> %197, i32 2
  %add124 = fadd double %209, %208
  %210 = insertelement <4 x double> %197, double %add124, i32 2
  %211 = extractelement <4 x double> %7, i32 0
  %212 = extractelement <4 x double> %9, i32 3
  %213 = extractelement <4 x double> %7, i32 1
  %214 = extractelement <4 x double> %11, i32 3
  %mul126 = fmul double %213, %214
  %215 = call double @llvm.fmuladd.f64(double %211, double %212, double %mul126)
  %216 = extractelement <4 x double> %7, i32 2
  %217 = extractelement <4 x double> %13, i32 3
  %218 = call double @llvm.fmuladd.f64(double %216, double %217, double %215)
  %219 = extractelement <4 x double> %7, i32 3
  %220 = extractelement <4 x double> %15, i32 3
  %221 = call double @llvm.fmuladd.f64(double %219, double %220, double %218)
  %222 = extractelement <4 x double> %210, i32 3
  %add129 = fadd double %222, %221
  %223 = insertelement <4 x double> %210, double %add129, i32 3
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %add130 = add nsw i32 %i.0, 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %224 = extractelement <2 x i32> %vecinit3, i32 0
  %225 = extractelement <2 x i32> %vecinit3, i32 1
  %shl131 = shl i32 %225, 2
  %add132 = add nsw i32 %shl131, 0
  %mul133 = mul i32 %add132, %div
  %add134 = add i32 %224, %mul133
  %idxprom135 = zext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds <4 x double> addrspace(1)* %matrixC, i64 %idxprom135
  store <4 x double> %sum0.0, <4 x double> addrspace(1)* %arrayidx136, align 32
  %226 = extractelement <2 x i32> %vecinit3, i32 0
  %227 = extractelement <2 x i32> %vecinit3, i32 1
  %shl137 = shl i32 %227, 2
  %add138 = add nsw i32 %shl137, 1
  %mul139 = mul i32 %add138, %div
  %add140 = add i32 %226, %mul139
  %idxprom141 = zext i32 %add140 to i64
  %arrayidx142 = getelementptr inbounds <4 x double> addrspace(1)* %matrixC, i64 %idxprom141
  store <4 x double> %sum1.0, <4 x double> addrspace(1)* %arrayidx142, align 32
  %228 = extractelement <2 x i32> %vecinit3, i32 0
  %229 = extractelement <2 x i32> %vecinit3, i32 1
  %shl143 = shl i32 %229, 2
  %add144 = add nsw i32 %shl143, 2
  %mul145 = mul i32 %add144, %div
  %add146 = add i32 %228, %mul145
  %idxprom147 = zext i32 %add146 to i64
  %arrayidx148 = getelementptr inbounds <4 x double> addrspace(1)* %matrixC, i64 %idxprom147
  store <4 x double> %sum2.0, <4 x double> addrspace(1)* %arrayidx148, align 32
  %230 = extractelement <2 x i32> %vecinit3, i32 0
  %231 = extractelement <2 x i32> %vecinit3, i32 1
  %shl149 = shl i32 %231, 2
  %add150 = add nsw i32 %shl149, 3
  %mul151 = mul i32 %add150, %div
  %add152 = add i32 %230, %mul151
  %idxprom153 = zext i32 %add152 to i64
  %arrayidx154 = getelementptr inbounds <4 x double> addrspace(1)* %matrixC, i64 %idxprom153
  store <4 x double> %sum3.0, <4 x double> addrspace(1)* %arrayidx154, align 32
  ret void
}

; Function Attrs: nounwind readnone
declare cc75 i64 @_Z13get_global_idj(i32) #1

; Function Attrs: nounwind readnone
declare double @llvm.fmuladd.f64(double, double, double) #1

; Function Attrs: nounwind
define cc76 void @__OpenCL_mmmKernel_local_kernel(<4 x double> addrspace(1)* %matrixA, <4 x double> addrspace(1)* %matrixB, <4 x double> addrspace(1)* %matrixC, i32 %widthA, <4 x double> addrspace(3)* %blockA) #0 {
entry:
  %call = call cc75 i64 @_Z12get_local_idj(i32 0) #1
  %call1 = call cc75 i64 @_Z14get_local_sizej(i32 0) #1
  %call2 = call cc75 i64 @_Z12get_local_idj(i32 1) #1
  %shl = shl i64 %call2, 2
  %mul = mul i64 %call1, %shl
  %add = add i64 %call, %mul
  %conv = trunc i64 %add to i32
  %call3 = call cc75 i64 @_Z13get_global_idj(i32 0) #1
  %call4 = call cc75 i64 @_Z13get_global_idj(i32 1) #1
  %shl5 = shl i64 %call4, 2
  %call6 = call cc75 i64 @_Z15get_global_sizej(i32 0) #1
  %mul7 = mul i64 %shl5, %call6
  %add8 = add i64 %call3, %mul7
  %conv9 = trunc i64 %add8 to i32
  %div = sdiv i32 %widthA, 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc211, %entry
  %sum0.0 = phi <4 x double> [ zeroinitializer, %entry ], [ %sum0.1, %for.inc211 ]
  %sum1.0 = phi <4 x double> [ zeroinitializer, %entry ], [ %sum1.1, %for.inc211 ]
  %sum2.0 = phi <4 x double> [ zeroinitializer, %entry ], [ %sum2.1, %for.inc211 ]
  %sum3.0 = phi <4 x double> [ zeroinitializer, %entry ], [ %sum3.1, %for.inc211 ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc211 ]
  %conv10 = sext i32 %i.0 to i64
  %conv11 = sext i32 %div to i64
  %call12 = call cc75 i64 @_Z14get_local_sizej(i32 0) #1
  %div13 = udiv i64 %conv11, %call12
  %cmp = icmp ult i64 %conv10, %div13
  br i1 %cmp, label %for.body, label %for.end212

for.body:                                         ; preds = %for.cond
  %conv15 = sext i32 %i.0 to i64
  %call16 = call cc75 i64 @_Z14get_local_sizej(i32 0) #1
  %mul17 = mul i64 %conv15, %call16
  %call18 = call cc75 i64 @_Z12get_local_idj(i32 0) #1
  %add19 = add i64 %mul17, %call18
  %call20 = call cc75 i64 @_Z13get_global_idj(i32 1) #1
  %shl21 = shl i64 %call20, 2
  %conv22 = sext i32 %div to i64
  %mul23 = mul i64 %shl21, %conv22
  %add24 = add i64 %add19, %mul23
  %conv25 = trunc i64 %add24 to i32
  %idxprom = sext i32 %conv25 to i64
  %arrayidx = getelementptr inbounds <4 x double> addrspace(1)* %matrixA, i64 %idxprom
  %0 = load <4 x double> addrspace(1)* %arrayidx, align 32
  %idxprom26 = sext i32 %conv to i64
  %arrayidx27 = getelementptr inbounds <4 x double> addrspace(3)* %blockA, i64 %idxprom26
  store <4 x double> %0, <4 x double> addrspace(3)* %arrayidx27, align 32
  %add28 = add nsw i32 %conv25, %div
  %idxprom29 = sext i32 %add28 to i64
  %arrayidx30 = getelementptr inbounds <4 x double> addrspace(1)* %matrixA, i64 %idxprom29
  %1 = load <4 x double> addrspace(1)* %arrayidx30, align 32
  %conv31 = sext i32 %conv to i64
  %call32 = call cc75 i64 @_Z14get_local_sizej(i32 0) #1
  %add33 = add i64 %conv31, %call32
  %arrayidx34 = getelementptr inbounds <4 x double> addrspace(3)* %blockA, i64 %add33
  store <4 x double> %1, <4 x double> addrspace(3)* %arrayidx34, align 32
  %mul35 = mul nsw i32 2, %div
  %add36 = add nsw i32 %conv25, %mul35
  %idxprom37 = sext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds <4 x double> addrspace(1)* %matrixA, i64 %idxprom37
  %2 = load <4 x double> addrspace(1)* %arrayidx38, align 32
  %conv39 = sext i32 %conv to i64
  %call40 = call cc75 i64 @_Z14get_local_sizej(i32 0) #1
  %mul41 = mul i64 2, %call40
  %add42 = add i64 %conv39, %mul41
  %arrayidx43 = getelementptr inbounds <4 x double> addrspace(3)* %blockA, i64 %add42
  store <4 x double> %2, <4 x double> addrspace(3)* %arrayidx43, align 32
  %mul44 = mul nsw i32 3, %div
  %add45 = add nsw i32 %conv25, %mul44
  %idxprom46 = sext i32 %add45 to i64
  %arrayidx47 = getelementptr inbounds <4 x double> addrspace(1)* %matrixA, i64 %idxprom46
  %3 = load <4 x double> addrspace(1)* %arrayidx47, align 32
  %conv48 = sext i32 %conv to i64
  %call49 = call cc75 i64 @_Z14get_local_sizej(i32 0) #1
  %mul50 = mul i64 3, %call49
  %add51 = add i64 %conv48, %mul50
  %arrayidx52 = getelementptr inbounds <4 x double> addrspace(3)* %blockA, i64 %add51
  store <4 x double> %3, <4 x double> addrspace(3)* %arrayidx52, align 32
  call cc75 void @_Z7barrierj(i32 1)
  %call53 = call cc75 i64 @_Z13get_global_idj(i32 0) #1
  %conv54 = sext i32 %i.0 to i64
  %call55 = call cc75 i64 @_Z14get_local_sizej(i32 0) #1
  %mul56 = mul i64 %conv54, %call55
  %shl57 = shl i64 %mul56, 2
  %call58 = call cc75 i64 @_Z15get_global_sizej(i32 0) #1
  %mul59 = mul i64 %shl57, %call58
  %add60 = add i64 %call53, %mul59
  %conv61 = trunc i64 %add60 to i32
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc, %for.body
  %sum0.1 = phi <4 x double> [ %sum0.0, %for.body ], [ %63, %for.inc ]
  %sum1.1 = phi <4 x double> [ %sum1.0, %for.body ], [ %115, %for.inc ]
  %sum2.1 = phi <4 x double> [ %sum2.0, %for.body ], [ %167, %for.inc ]
  %sum3.1 = phi <4 x double> [ %sum3.0, %for.body ], [ %219, %for.inc ]
  %j.0 = phi i32 [ 0, %for.body ], [ %add210, %for.inc ]
  %conv63 = sext i32 %j.0 to i64
  %call64 = call cc75 i64 @_Z14get_local_sizej(i32 0) #1
  %mul65 = mul i64 %call64, 4
  %cmp66 = icmp ult i64 %conv63, %mul65
  br i1 %cmp66, label %for.body68, label %for.end

for.body68:                                       ; preds = %for.cond62
  %shr = ashr i32 %j.0, 2
  %conv69 = sext i32 %shr to i64
  %call70 = call cc75 i64 @_Z12get_local_idj(i32 1) #1
  %mul71 = mul i64 %call70, 4
  %call72 = call cc75 i64 @_Z14get_local_sizej(i32 0) #1
  %mul73 = mul i64 %mul71, %call72
  %add74 = add i64 %conv69, %mul73
  %arrayidx75 = getelementptr inbounds <4 x double> addrspace(3)* %blockA, i64 %add74
  %4 = load <4 x double> addrspace(3)* %arrayidx75, align 32
  %shr76 = ashr i32 %j.0, 2
  %conv77 = sext i32 %shr76 to i64
  %call78 = call cc75 i64 @_Z12get_local_idj(i32 1) #1
  %mul79 = mul i64 %call78, 4
  %add80 = add i64 %mul79, 1
  %call81 = call cc75 i64 @_Z14get_local_sizej(i32 0) #1
  %mul82 = mul i64 %add80, %call81
  %add83 = add i64 %conv77, %mul82
  %arrayidx84 = getelementptr inbounds <4 x double> addrspace(3)* %blockA, i64 %add83
  %5 = load <4 x double> addrspace(3)* %arrayidx84, align 32
  %shr85 = ashr i32 %j.0, 2
  %conv86 = sext i32 %shr85 to i64
  %call87 = call cc75 i64 @_Z12get_local_idj(i32 1) #1
  %mul88 = mul i64 %call87, 4
  %add89 = add i64 %mul88, 2
  %call90 = call cc75 i64 @_Z14get_local_sizej(i32 0) #1
  %mul91 = mul i64 %add89, %call90
  %add92 = add i64 %conv86, %mul91
  %arrayidx93 = getelementptr inbounds <4 x double> addrspace(3)* %blockA, i64 %add92
  %6 = load <4 x double> addrspace(3)* %arrayidx93, align 32
  %shr94 = ashr i32 %j.0, 2
  %conv95 = sext i32 %shr94 to i64
  %call96 = call cc75 i64 @_Z12get_local_idj(i32 1) #1
  %mul97 = mul i64 %call96, 4
  %add98 = add i64 %mul97, 3
  %call99 = call cc75 i64 @_Z14get_local_sizej(i32 0) #1
  %mul100 = mul i64 %add98, %call99
  %add101 = add i64 %conv95, %mul100
  %arrayidx102 = getelementptr inbounds <4 x double> addrspace(3)* %blockA, i64 %add101
  %7 = load <4 x double> addrspace(3)* %arrayidx102, align 32
  %conv103 = sext i32 %conv61 to i64
  %conv104 = sext i32 %j.0 to i64
  %call105 = call cc75 i64 @_Z15get_global_sizej(i32 0) #1
  %mul106 = mul i64 %conv104, %call105
  %add107 = add i64 %conv103, %mul106
  %arrayidx108 = getelementptr inbounds <4 x double> addrspace(1)* %matrixB, i64 %add107
  %8 = load <4 x double> addrspace(1)* %arrayidx108, align 32
  %conv109 = sext i32 %conv61 to i64
  %add110 = add nsw i32 %j.0, 1
  %conv111 = sext i32 %add110 to i64
  %call112 = call cc75 i64 @_Z15get_global_sizej(i32 0) #1
  %mul113 = mul i64 %conv111, %call112
  %add114 = add i64 %conv109, %mul113
  %arrayidx115 = getelementptr inbounds <4 x double> addrspace(1)* %matrixB, i64 %add114
  %9 = load <4 x double> addrspace(1)* %arrayidx115, align 32
  %conv116 = sext i32 %conv61 to i64
  %add117 = add nsw i32 %j.0, 2
  %conv118 = sext i32 %add117 to i64
  %call119 = call cc75 i64 @_Z15get_global_sizej(i32 0) #1
  %mul120 = mul i64 %conv118, %call119
  %add121 = add i64 %conv116, %mul120
  %arrayidx122 = getelementptr inbounds <4 x double> addrspace(1)* %matrixB, i64 %add121
  %10 = load <4 x double> addrspace(1)* %arrayidx122, align 32
  %conv123 = sext i32 %conv61 to i64
  %add124 = add nsw i32 %j.0, 3
  %conv125 = sext i32 %add124 to i64
  %call126 = call cc75 i64 @_Z15get_global_sizej(i32 0) #1
  %mul127 = mul i64 %conv125, %call126
  %add128 = add i64 %conv123, %mul127
  %arrayidx129 = getelementptr inbounds <4 x double> addrspace(1)* %matrixB, i64 %add128
  %11 = load <4 x double> addrspace(1)* %arrayidx129, align 32
  %12 = extractelement <4 x double> %4, i32 0
  %13 = extractelement <4 x double> %8, i32 0
  %14 = extractelement <4 x double> %4, i32 1
  %15 = extractelement <4 x double> %9, i32 0
  %mul131 = fmul double %14, %15
  %16 = call double @llvm.fmuladd.f64(double %12, double %13, double %mul131)
  %17 = extractelement <4 x double> %4, i32 2
  %18 = extractelement <4 x double> %10, i32 0
  %19 = call double @llvm.fmuladd.f64(double %17, double %18, double %16)
  %20 = extractelement <4 x double> %4, i32 3
  %21 = extractelement <4 x double> %11, i32 0
  %22 = call double @llvm.fmuladd.f64(double %20, double %21, double %19)
  %23 = extractelement <4 x double> %sum0.1, i32 0
  %add134 = fadd double %23, %22
  %24 = insertelement <4 x double> %sum0.1, double %add134, i32 0
  %25 = extractelement <4 x double> %4, i32 0
  %26 = extractelement <4 x double> %8, i32 1
  %27 = extractelement <4 x double> %4, i32 1
  %28 = extractelement <4 x double> %9, i32 1
  %mul136 = fmul double %27, %28
  %29 = call double @llvm.fmuladd.f64(double %25, double %26, double %mul136)
  %30 = extractelement <4 x double> %4, i32 2
  %31 = extractelement <4 x double> %10, i32 1
  %32 = call double @llvm.fmuladd.f64(double %30, double %31, double %29)
  %33 = extractelement <4 x double> %4, i32 3
  %34 = extractelement <4 x double> %11, i32 1
  %35 = call double @llvm.fmuladd.f64(double %33, double %34, double %32)
  %36 = extractelement <4 x double> %24, i32 1
  %add139 = fadd double %36, %35
  %37 = insertelement <4 x double> %24, double %add139, i32 1
  %38 = extractelement <4 x double> %4, i32 0
  %39 = extractelement <4 x double> %8, i32 2
  %40 = extractelement <4 x double> %4, i32 1
  %41 = extractelement <4 x double> %9, i32 2
  %mul141 = fmul double %40, %41
  %42 = call double @llvm.fmuladd.f64(double %38, double %39, double %mul141)
  %43 = extractelement <4 x double> %4, i32 2
  %44 = extractelement <4 x double> %10, i32 2
  %45 = call double @llvm.fmuladd.f64(double %43, double %44, double %42)
  %46 = extractelement <4 x double> %4, i32 3
  %47 = extractelement <4 x double> %11, i32 2
  %48 = call double @llvm.fmuladd.f64(double %46, double %47, double %45)
  %49 = extractelement <4 x double> %37, i32 2
  %add144 = fadd double %49, %48
  %50 = insertelement <4 x double> %37, double %add144, i32 2
  %51 = extractelement <4 x double> %4, i32 0
  %52 = extractelement <4 x double> %8, i32 3
  %53 = extractelement <4 x double> %4, i32 1
  %54 = extractelement <4 x double> %9, i32 3
  %mul146 = fmul double %53, %54
  %55 = call double @llvm.fmuladd.f64(double %51, double %52, double %mul146)
  %56 = extractelement <4 x double> %4, i32 2
  %57 = extractelement <4 x double> %10, i32 3
  %58 = call double @llvm.fmuladd.f64(double %56, double %57, double %55)
  %59 = extractelement <4 x double> %4, i32 3
  %60 = extractelement <4 x double> %11, i32 3
  %61 = call double @llvm.fmuladd.f64(double %59, double %60, double %58)
  %62 = extractelement <4 x double> %50, i32 3
  %add149 = fadd double %62, %61
  %63 = insertelement <4 x double> %50, double %add149, i32 3
  %64 = extractelement <4 x double> %5, i32 0
  %65 = extractelement <4 x double> %8, i32 0
  %66 = extractelement <4 x double> %5, i32 1
  %67 = extractelement <4 x double> %9, i32 0
  %mul151 = fmul double %66, %67
  %68 = call double @llvm.fmuladd.f64(double %64, double %65, double %mul151)
  %69 = extractelement <4 x double> %5, i32 2
  %70 = extractelement <4 x double> %10, i32 0
  %71 = call double @llvm.fmuladd.f64(double %69, double %70, double %68)
  %72 = extractelement <4 x double> %5, i32 3
  %73 = extractelement <4 x double> %11, i32 0
  %74 = call double @llvm.fmuladd.f64(double %72, double %73, double %71)
  %75 = extractelement <4 x double> %sum1.1, i32 0
  %add154 = fadd double %75, %74
  %76 = insertelement <4 x double> %sum1.1, double %add154, i32 0
  %77 = extractelement <4 x double> %5, i32 0
  %78 = extractelement <4 x double> %8, i32 1
  %79 = extractelement <4 x double> %5, i32 1
  %80 = extractelement <4 x double> %9, i32 1
  %mul156 = fmul double %79, %80
  %81 = call double @llvm.fmuladd.f64(double %77, double %78, double %mul156)
  %82 = extractelement <4 x double> %5, i32 2
  %83 = extractelement <4 x double> %10, i32 1
  %84 = call double @llvm.fmuladd.f64(double %82, double %83, double %81)
  %85 = extractelement <4 x double> %5, i32 3
  %86 = extractelement <4 x double> %11, i32 1
  %87 = call double @llvm.fmuladd.f64(double %85, double %86, double %84)
  %88 = extractelement <4 x double> %76, i32 1
  %add159 = fadd double %88, %87
  %89 = insertelement <4 x double> %76, double %add159, i32 1
  %90 = extractelement <4 x double> %5, i32 0
  %91 = extractelement <4 x double> %8, i32 2
  %92 = extractelement <4 x double> %5, i32 1
  %93 = extractelement <4 x double> %9, i32 2
  %mul161 = fmul double %92, %93
  %94 = call double @llvm.fmuladd.f64(double %90, double %91, double %mul161)
  %95 = extractelement <4 x double> %5, i32 2
  %96 = extractelement <4 x double> %10, i32 2
  %97 = call double @llvm.fmuladd.f64(double %95, double %96, double %94)
  %98 = extractelement <4 x double> %5, i32 3
  %99 = extractelement <4 x double> %11, i32 2
  %100 = call double @llvm.fmuladd.f64(double %98, double %99, double %97)
  %101 = extractelement <4 x double> %89, i32 2
  %add164 = fadd double %101, %100
  %102 = insertelement <4 x double> %89, double %add164, i32 2
  %103 = extractelement <4 x double> %5, i32 0
  %104 = extractelement <4 x double> %8, i32 3
  %105 = extractelement <4 x double> %5, i32 1
  %106 = extractelement <4 x double> %9, i32 3
  %mul166 = fmul double %105, %106
  %107 = call double @llvm.fmuladd.f64(double %103, double %104, double %mul166)
  %108 = extractelement <4 x double> %5, i32 2
  %109 = extractelement <4 x double> %10, i32 3
  %110 = call double @llvm.fmuladd.f64(double %108, double %109, double %107)
  %111 = extractelement <4 x double> %5, i32 3
  %112 = extractelement <4 x double> %11, i32 3
  %113 = call double @llvm.fmuladd.f64(double %111, double %112, double %110)
  %114 = extractelement <4 x double> %102, i32 3
  %add169 = fadd double %114, %113
  %115 = insertelement <4 x double> %102, double %add169, i32 3
  %116 = extractelement <4 x double> %6, i32 0
  %117 = extractelement <4 x double> %8, i32 0
  %118 = extractelement <4 x double> %6, i32 1
  %119 = extractelement <4 x double> %9, i32 0
  %mul171 = fmul double %118, %119
  %120 = call double @llvm.fmuladd.f64(double %116, double %117, double %mul171)
  %121 = extractelement <4 x double> %6, i32 2
  %122 = extractelement <4 x double> %10, i32 0
  %123 = call double @llvm.fmuladd.f64(double %121, double %122, double %120)
  %124 = extractelement <4 x double> %6, i32 3
  %125 = extractelement <4 x double> %11, i32 0
  %126 = call double @llvm.fmuladd.f64(double %124, double %125, double %123)
  %127 = extractelement <4 x double> %sum2.1, i32 0
  %add174 = fadd double %127, %126
  %128 = insertelement <4 x double> %sum2.1, double %add174, i32 0
  %129 = extractelement <4 x double> %6, i32 0
  %130 = extractelement <4 x double> %8, i32 1
  %131 = extractelement <4 x double> %6, i32 1
  %132 = extractelement <4 x double> %9, i32 1
  %mul176 = fmul double %131, %132
  %133 = call double @llvm.fmuladd.f64(double %129, double %130, double %mul176)
  %134 = extractelement <4 x double> %6, i32 2
  %135 = extractelement <4 x double> %10, i32 1
  %136 = call double @llvm.fmuladd.f64(double %134, double %135, double %133)
  %137 = extractelement <4 x double> %6, i32 3
  %138 = extractelement <4 x double> %11, i32 1
  %139 = call double @llvm.fmuladd.f64(double %137, double %138, double %136)
  %140 = extractelement <4 x double> %128, i32 1
  %add179 = fadd double %140, %139
  %141 = insertelement <4 x double> %128, double %add179, i32 1
  %142 = extractelement <4 x double> %6, i32 0
  %143 = extractelement <4 x double> %8, i32 2
  %144 = extractelement <4 x double> %6, i32 1
  %145 = extractelement <4 x double> %9, i32 2
  %mul181 = fmul double %144, %145
  %146 = call double @llvm.fmuladd.f64(double %142, double %143, double %mul181)
  %147 = extractelement <4 x double> %6, i32 2
  %148 = extractelement <4 x double> %10, i32 2
  %149 = call double @llvm.fmuladd.f64(double %147, double %148, double %146)
  %150 = extractelement <4 x double> %6, i32 3
  %151 = extractelement <4 x double> %11, i32 2
  %152 = call double @llvm.fmuladd.f64(double %150, double %151, double %149)
  %153 = extractelement <4 x double> %141, i32 2
  %add184 = fadd double %153, %152
  %154 = insertelement <4 x double> %141, double %add184, i32 2
  %155 = extractelement <4 x double> %6, i32 0
  %156 = extractelement <4 x double> %8, i32 3
  %157 = extractelement <4 x double> %6, i32 1
  %158 = extractelement <4 x double> %9, i32 3
  %mul186 = fmul double %157, %158
  %159 = call double @llvm.fmuladd.f64(double %155, double %156, double %mul186)
  %160 = extractelement <4 x double> %6, i32 2
  %161 = extractelement <4 x double> %10, i32 3
  %162 = call double @llvm.fmuladd.f64(double %160, double %161, double %159)
  %163 = extractelement <4 x double> %6, i32 3
  %164 = extractelement <4 x double> %11, i32 3
  %165 = call double @llvm.fmuladd.f64(double %163, double %164, double %162)
  %166 = extractelement <4 x double> %154, i32 3
  %add189 = fadd double %166, %165
  %167 = insertelement <4 x double> %154, double %add189, i32 3
  %168 = extractelement <4 x double> %7, i32 0
  %169 = extractelement <4 x double> %8, i32 0
  %170 = extractelement <4 x double> %7, i32 1
  %171 = extractelement <4 x double> %9, i32 0
  %mul191 = fmul double %170, %171
  %172 = call double @llvm.fmuladd.f64(double %168, double %169, double %mul191)
  %173 = extractelement <4 x double> %7, i32 2
  %174 = extractelement <4 x double> %10, i32 0
  %175 = call double @llvm.fmuladd.f64(double %173, double %174, double %172)
  %176 = extractelement <4 x double> %7, i32 3
  %177 = extractelement <4 x double> %11, i32 0
  %178 = call double @llvm.fmuladd.f64(double %176, double %177, double %175)
  %179 = extractelement <4 x double> %sum3.1, i32 0
  %add194 = fadd double %179, %178
  %180 = insertelement <4 x double> %sum3.1, double %add194, i32 0
  %181 = extractelement <4 x double> %7, i32 0
  %182 = extractelement <4 x double> %8, i32 1
  %183 = extractelement <4 x double> %7, i32 1
  %184 = extractelement <4 x double> %9, i32 1
  %mul196 = fmul double %183, %184
  %185 = call double @llvm.fmuladd.f64(double %181, double %182, double %mul196)
  %186 = extractelement <4 x double> %7, i32 2
  %187 = extractelement <4 x double> %10, i32 1
  %188 = call double @llvm.fmuladd.f64(double %186, double %187, double %185)
  %189 = extractelement <4 x double> %7, i32 3
  %190 = extractelement <4 x double> %11, i32 1
  %191 = call double @llvm.fmuladd.f64(double %189, double %190, double %188)
  %192 = extractelement <4 x double> %180, i32 1
  %add199 = fadd double %192, %191
  %193 = insertelement <4 x double> %180, double %add199, i32 1
  %194 = extractelement <4 x double> %7, i32 0
  %195 = extractelement <4 x double> %8, i32 2
  %196 = extractelement <4 x double> %7, i32 1
  %197 = extractelement <4 x double> %9, i32 2
  %mul201 = fmul double %196, %197
  %198 = call double @llvm.fmuladd.f64(double %194, double %195, double %mul201)
  %199 = extractelement <4 x double> %7, i32 2
  %200 = extractelement <4 x double> %10, i32 2
  %201 = call double @llvm.fmuladd.f64(double %199, double %200, double %198)
  %202 = extractelement <4 x double> %7, i32 3
  %203 = extractelement <4 x double> %11, i32 2
  %204 = call double @llvm.fmuladd.f64(double %202, double %203, double %201)
  %205 = extractelement <4 x double> %193, i32 2
  %add204 = fadd double %205, %204
  %206 = insertelement <4 x double> %193, double %add204, i32 2
  %207 = extractelement <4 x double> %7, i32 0
  %208 = extractelement <4 x double> %8, i32 3
  %209 = extractelement <4 x double> %7, i32 1
  %210 = extractelement <4 x double> %9, i32 3
  %mul206 = fmul double %209, %210
  %211 = call double @llvm.fmuladd.f64(double %207, double %208, double %mul206)
  %212 = extractelement <4 x double> %7, i32 2
  %213 = extractelement <4 x double> %10, i32 3
  %214 = call double @llvm.fmuladd.f64(double %212, double %213, double %211)
  %215 = extractelement <4 x double> %7, i32 3
  %216 = extractelement <4 x double> %11, i32 3
  %217 = call double @llvm.fmuladd.f64(double %215, double %216, double %214)
  %218 = extractelement <4 x double> %206, i32 3
  %add209 = fadd double %218, %217
  %219 = insertelement <4 x double> %206, double %add209, i32 3
  br label %for.inc

for.inc:                                          ; preds = %for.body68
  %add210 = add nsw i32 %j.0, 4
  br label %for.cond62

for.end:                                          ; preds = %for.cond62
  call cc75 void @_Z7barrierj(i32 1)
  br label %for.inc211

for.inc211:                                       ; preds = %for.end
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end212:                                       ; preds = %for.cond
  %idxprom213 = sext i32 %conv9 to i64
  %arrayidx214 = getelementptr inbounds <4 x double> addrspace(1)* %matrixC, i64 %idxprom213
  store <4 x double> %sum0.0, <4 x double> addrspace(1)* %arrayidx214, align 32
  %conv215 = sext i32 %conv9 to i64
  %call216 = call cc75 i64 @_Z15get_global_sizej(i32 0) #1
  %add217 = add i64 %conv215, %call216
  %arrayidx218 = getelementptr inbounds <4 x double> addrspace(1)* %matrixC, i64 %add217
  store <4 x double> %sum1.0, <4 x double> addrspace(1)* %arrayidx218, align 32
  %conv219 = sext i32 %conv9 to i64
  %call220 = call cc75 i64 @_Z15get_global_sizej(i32 0) #1
  %mul221 = mul i64 2, %call220
  %add222 = add i64 %conv219, %mul221
  %arrayidx223 = getelementptr inbounds <4 x double> addrspace(1)* %matrixC, i64 %add222
  store <4 x double> %sum2.0, <4 x double> addrspace(1)* %arrayidx223, align 32
  %conv224 = sext i32 %conv9 to i64
  %call225 = call cc75 i64 @_Z15get_global_sizej(i32 0) #1
  %mul226 = mul i64 3, %call225
  %add227 = add i64 %conv224, %mul226
  %arrayidx228 = getelementptr inbounds <4 x double> addrspace(1)* %matrixC, i64 %add227
  store <4 x double> %sum3.0, <4 x double> addrspace(1)* %arrayidx228, align 32
  ret void
}

; Function Attrs: nounwind readnone
declare cc75 i64 @_Z12get_local_idj(i32) #1

; Function Attrs: nounwind readnone
declare cc75 i64 @_Z14get_local_sizej(i32) #1

; Function Attrs: nounwind readnone
declare cc75 i64 @_Z15get_global_sizej(i32) #1

declare cc75 void @_Z7barrierj(i32)

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }

!opencl.kernels = !{!0, !6}
!opencl.enable.FP_CONTRACT = !{}
!opencl.ocl.version = !{!10}
!opencl.spir.version = !{!10}

!0 = metadata !{void (<4 x double> addrspace(1)*, <4 x double> addrspace(1)*, <4 x double> addrspace(1)*, i32, i32)* @__OpenCL_mmmKernel_kernel, metadata !1, metadata !2, metadata !3, metadata !4, metadata !5}
!1 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 1, i32 1, i32 0, i32 0}
!2 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none", metadata !"none", metadata !"none", metadata !"none", metadata !"none"}
!3 = metadata !{metadata !"kernel_arg_type", metadata !"double4*", metadata !"double4*", metadata !"double4*", metadata !"uint", metadata !"uint"}
!4 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !"", metadata !"", metadata !"", metadata !""}
!5 = metadata !{metadata !"kernel_arg_base_type", metadata !"double4*", metadata !"double4*", metadata !"double4*", metadata !"uint", metadata !"uint"}
!6 = metadata !{void (<4 x double> addrspace(1)*, <4 x double> addrspace(1)*, <4 x double> addrspace(1)*, i32, <4 x double> addrspace(3)*)* @__OpenCL_mmmKernel_local_kernel, metadata !7, metadata !2, metadata !8, metadata !4, metadata !9}
!7 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 1, i32 1, i32 0, i32 3}
!8 = metadata !{metadata !"kernel_arg_type", metadata !"double4*", metadata !"double4*", metadata !"double4*", metadata !"int", metadata !"double4*"}
!9 = metadata !{metadata !"kernel_arg_base_type", metadata !"double4*", metadata !"double4*", metadata !"double4*", metadata !"int", metadata !"double4*"}
!10 = metadata !{i32 1, i32 2}
